##phenotype
##run phenograph
require(Rphenograph)
phenos<-Rphenograph(t(cellIntensity(x)),k=35)
pheno.labels<-as.numeric(membership(phenos[[2]]))
getNetwork(x)<-matrix(pheno.labels)
head(getNetwork(x))
##plot phenograph
plot_clustering_heatmap_wrapper(myExperiment=x)
##store the ROIID in the metadata columns.
##access the unique cell labels.
head(getLabel(x))
roi<-subsetCase(x,372149 )
##you can append more clinical features to the columns of the sampleDat data.frame.
H<-imcExperimentToHyperFrame(imcExperiment=x)
helper<-function(pp=NULL,i=NULL,j=NULL){
ps<-split(pp)
nnd<-nncross(ps[[i]],ps[[j]])
}
## 1-NN analysis.
## compare cluster 10 to cluster 9
eachNND<-with(H,helper(pp=point,i="10",j="8"))
## first choose 2 clusters to compare.
sapply(eachNND,function(x) mean(x[,"dist"]))
H
eeachNND
eachNND
library(CATALYST)
library(cowplot)
library(flowCore)
library(ggplot2)
library(SingleCellExperiment)
## from IMCexperiment to SCE
sce<- SingleCellExperiment(x)
class(sce)
data("imcData")
imc
imcData
rd<-DataFrame(sample_id=colData(imcData))
rd$group_id<-key[match(rd$sample_id.ROIID,key$Name),'Treatment']
colData(imcData)
rd
rd<-DataFrame(colData(imcData))
rd
key
marker_info<-data.frame(channel_name=sapply(strsplit(rownames(imc),"_"),function(x) x[3]),
marker_name=rownames(imc),
marker_class=c(rep("type",13),
rep("state",18),
rep("none",13)))
marker_info<-data.frame(channel_name=sapply(strsplit(rownames(imc),"_"),function(x) x[3]),
marker_name=rownames(imcData),
marker_class=c(rep("type",13),
rep("state",18),
rep("none",13)))
marker_info<-data.frame(channel_name=sapply(strsplit(rownames(imcData),"_"),function(x) x[3]),
marker_name=rownames(imcData),
marker_class=c(rep("type",13),
rep("state",18),
rep("none",13)))
## Switching into Summarized Experiment class.
dse<-SummarizedExperiment(assays=SimpleList(exprs=pn),
rowData=rd,
colData=DataFrame(marker_info)
)
imcData
dse<-SummarizedExperiment(assays=SimpleList(exprs=t(cellIntensity(imcData))),
rowData=rd,
colData=DataFrame(marker_info)
)
stopifnot(all(colnames(dse)==marker_info$marker_name))
dse
dse <- transformData(dse)
library(CATALYST)
library(cowplot)
library(flowCore)
library(ggplot2)
library(SingleCellExperiment)
dse <- transformData(dse)
??transformData
library(diffcyt)
dse <- transformData(dse)
dse <- (generateClusters(dse,meta_clustering=TRUE,meta_k=30,seed_clustering=828))
## examine each cluster.
cluster<-rowData(dse)
data<-data.frame(t(logcounts(imcData)),cluster)
plot_clustering_heatmap_wrapper(expr=data[,rownames(imcData)],
cell_clustering=data$cluster_id)
## examine each cluster.
cluster<-rowData(dse)
data<-data.frame(t(logcounts(imcData)),cluster)
head(dta)
head(data)
rownames(imcData)
rownames(imcData)
colnames(data)
plot_clustering_heatmap_wrapper(expr=data[,rownames(imcData)],
cell_clustering=data$cluster_id)
dse
head(data)
dse
imcData
metadata(imcData)$key
imcData
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(magrittr)
##the rows of the IMC container input are the protein antibody panel, the columns are the cells. (need to transpose for matrix computatoins)
plot_clustering_heatmap_wrapper<-function(myExperiment=NULL,
useMedians=TRUE,
color_clusters=NULL){
expr<-(cellIntensity(myExperiment))
cell_clustering<-(getNetwork(myExperiment))
expr<-t(as.matrix(expr))
if(is.null(color_clusters)==TRUE){
color_clusters <- c("#DC050C", "#FB8072", "#1965B0", "#7BAFDE", "#882E72",
"#B17BA6", "#FF7F00", "#FDB462", "#E7298A", "#E78AC3",
"#33A02C", "#B2DF8A", "#55A1B1", "#8DD3C7", "#A6761D",
"#E6AB02", "#7570B3", "#BEAED4", "#666666", "#999999",
"#aa8282", "#d4b7b7", "#8600bf", "#ba5ce3", "#808000",
"#aeae5c", "#1e90ff", "#00bfff", "#56ff0d", "#ffff00")
}
# Calculate the median expression
expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
group_by(cell_clustering) %>%
summarize_all(funs(median))
if(useMedians==TRUE){
expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
group_by(cell_clustering) %>%
summarize_all(funs(median))
}else{
expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
group_by(cell_clustering) %>%
summarize_all(funs(mean))
}
# Calculate cluster frequencies
clustering_table <- as.numeric(table(cell_clustering))
# This clustering is based on the markers that were used for the main clustering
d <- dist(expr_median[, colnames(expr)], method = "euclidean")
cluster_rows <- hclust(d, method = "average")
expr_heat <- as.matrix(expr_median[, colnames(expr)])
rownames(expr_heat) <- expr_median$cell_clustering
labels_row <- paste0(rownames(expr_heat), " (",
round(clustering_table / sum(clustering_table) * 100, 2), "%)")
labels_col <- colnames(expr_heat)
# Row annotation for the heatmap
annotation_row <- data.frame(cluster = factor(expr_median$cell_clustering))
rownames(annotation_row) <- rownames(expr_heat)
color_clusters <- color_clusters[1:nlevels(annotation_row$cluster)]
names(color_clusters) <- levels(annotation_row$cluster)
annotation_colors <- list(cluster = color_clusters)
annotation_legend <- FALSE
# Colors for the heatmap
#library(RColorBrewer);
color <- colorRampPalette(rev(brewer.pal(n = 9, name = "RdYlBu")))(100)
pheatmap(expr_heat, color = color,
cluster_cols = FALSE, cluster_rows = cluster_rows,
labels_col = labels_col, labels_row = labels_row,
display_numbers = TRUE, number_color = "black",
fontsize = 12, fontsize_number = 12,
annotation_row = annotation_row, annotation_colors = annotation_colors,
annotation_legend = annotation_legend)
}
plot_matrix_heatmap_wrapper<-function(expr=NULL,
cell_clustering=NULL, cluster_merging = NULL,useMedians=TRUE,useQuantiles=FALSE,
color_clusters=NULL){
## cluster_merging should be character merging vector of 29 or so clusters. this is input from the ANNOTATION object.  not a matched object level.
expr<-as.matrix(expr)
if(useQuantiles==TRUE){
##max min normalization
library(matrixStats)
rng <- colQuantiles(expr, probs = c(0.001, 0.999))
expr01 <- t((t(expr) - rng[, 1]) / (rng[, 2] - rng[, 1]))
expr01[expr01 < 0] <- 0
expr01[expr01 > 1] <- 1
}else{
expr01<-expr
}
if(is.null(color_clusters)==TRUE){
color_clusters <- c("#DC050C", "#FB8072", "#1965B0", "#7BAFDE", "#882E72",
"#B17BA6", "#FF7F00", "#FDB462", "#E7298A", "#E78AC3",
"#33A02C", "#B2DF8A", "#55A1B1", "#8DD3C7", "#A6761D",
"#E6AB02", "#7570B3", "#BEAED4", "#666666", "#999999",
"#aa8282", "#d4b7b7", "#8600bf", "#ba5ce3", "#808000",
"#aeae5c", "#1e90ff", "#00bfff", "#56ff0d", "#ffff00")
}
# Calculate the median expression
library(dplyr)
expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
dplyr::group_by(cell_clustering) %>%
dplyr::summarize_all(funs(median))
if(useMedians==TRUE){
expr01_median <- data.frame(expr01, cell_clustering = cell_clustering) %>%
group_by(cell_clustering) %>%
dplyr::summarize_all(funs(median))
}else{
expr01_median <- data.frame(expr01, cell_clustering = cell_clustering) %>%
dplyr::group_by(cell_clustering) %>%
dplyr::summarize_all(funs(mean))
}
# Calculate cluster frequencies
clustering_table <- as.numeric(table(cell_clustering))
print(dim(expr_median))
# This clustering is based on the markers that were used for the main clustering
d <- dist(expr_median[, colnames(expr)], method = "euclidean")
cluster_rows <- hclust(d, method = "average")
expr_heat <- as.matrix(expr01_median[, colnames(expr01)])
rownames(expr_heat) <- expr01_median$cell_clustering
labels_row <- paste0(rownames(expr_heat), " (",
round(clustering_table / sum(clustering_table) * 100, 2), "%)")
labels_col <- colnames(expr_heat)
# Row annotation for the heatmap
annotation_row <- data.frame(cluster = factor(expr01_median$cell_clustering))
rownames(annotation_row) <- rownames(expr_heat)
color_clusters <- color_clusters[1:nlevels(annotation_row$cluster)]
names(color_clusters) <- levels(annotation_row$cluster)
annotation_colors <- list(cluster = color_clusters)
annotation_legend <- FALSE
if(!is.null(cluster_merging)){
annotation_row$cluster_merging <- factor(cluster_merging)
color_clusters <- color_clusters[1:nlevels(factor(cluster_merging))]
names(color_clusters) <- levels(factor(cluster_merging))
annotation_colors$cluster_merging <- color_clusters
annotation_legend <- TRUE
}
# Colors for the heatmap
library(RColorBrewer);library(pheatmap)
color <- colorRampPalette(rev(brewer.pal(n = 9, name = "RdYlBu")))(100)
pheatmap::pheatmap(expr_heat, color = color,
cluster_cols = FALSE, cluster_rows = cluster_rows,
labels_col = labels_col, labels_row = labels_row,
display_numbers = TRUE, number_color = "black",
fontsize = 10, fontsize_number = 7,
annotation_row = annotation_row, annotation_colors = annotation_colors,
annotation_legend = annotation_legend)
}
plot_matrix_heatmap_wrapper(expr=data[,rownames(imcData)],
cell_clustering=data$cluster_id)
is(assay(imcData,'counts'),'matrix')
channel<-sapply(strsplit(rownames(imcData),"_"),function(x) x[3])
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
imcData
rownames(imcData)
rowData(imcData)
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rownames(imcData)<-marker
imcData
rownames(imcData)
plotScatter(imcData,rownames(imc)[17:18],assay='counts')
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
rownmes(imcData)
rownames(imcData)
colData(imcData)$ROIID
table(colData(imcData)$ROIID)
(fsimc <- sce2fcs(imcData, split_by = "ROIID"))
fsimc
rownames(imcData)
fsimc
colnames(fsimc)
rownames(imc)
rownames(imcData)
duplicated(rownames(imcData))
ds
se
dse
fsimc(dse)
sce2fcs(dse)
SingleCellExperiment(dse)
sce2fcs(SingleCellExperiment(dse))
rowData(imcData)
rowData(imcData)%>%data.frame
fsimc
pData(fsimc)
fsApply(fsimc,nrow)
dim(exprs(fsimc))
dim(exprs(fsimc[[1]]))
exprs(fsimc[[1]])[1:5,1:5]
imcData
marker_info
imcData
colData(imcData)
pData(fsimc)
colData(imcData)
colData(imcData)$Treatment
colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$ROIID)]
exper_info<-data.frame(name=pData(fsimc)$name,group_id=colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$ROIID)])
exper_info
exper_info<-data.frame(group_id=colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$ROIID)],
sample_id=pData(fsimc)$name)
exper_info
colData(imcData)
exper_info<-data.frame(group_id=colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$ROIID)],
patient_id=colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$Patient.Number)],
sample_id=pData(fsimc)$name)
exper_info
exper_info<-data.frame(group_id=colData(imcData)$Treatment[match(pData(fsimc)$name,colData(imcData)$ROIID)],
patient_id=colData(imcData)$Patient.Number[match(pData(fsimc)$name,colData(imcData)$ROIID)],
sample_id=pData(fsimc)$name)
exper_info
## create design
design<-createDesignMatrix(
exper_info,cols_design=c("group_id","patient_id"))
design
colnames(design)
contrast<-createContrast(c(0,1,0))
nrow(contrast)==ncol(design)
data.frame(parameters=colnames(design),contrast)
fsimc
dim(design)
out_DA<-diffcyt(
d_input=fsimc,
experiment_info=experiment_info,
marker_info=marker_info,
design=design,
contrast=contrast,
analysis_type = "DA",
seed_clustering = 123
)
out_DA<-diffcyt(
d_input=fsimc,
experiment_info=exper_info,
marker_info=marker_info,
design=design,
contrast=contrast,
analysis_type = "DA",
seed_clustering = 123
)
out_DA
topTable(out_DA,format_vals = TRUE)
out_DS<-diffcyt(
d_input=fsimc,
experiment_info=exper_info,
marker_info=marker_info,
design=design,
contrast=contrast,
analysis_type='DS',
seed_clustering = 123,
plot=FALSE)
out_DS
topTable(out_DS,format_vals = TRUE)
d_se<-prepareData(fsimc,exper_info,marker_info)
d_se
build_manual()
library(devtools)
build_manual()
document()
check()
document()
check()
library(methods)
?methods
document9)
document()
check()
data(data)
data
getwd()
save(data,file='data.rda')
data("imcData")
imcData
save(imcData,file='imcData.rda')
library(devtools)
document()
build()
build_manual()
install()
library(imcExperiment)
data(data)
data
data("imcData")
imcData
check()
head(data)
dim(data)
imcData
check()
build_manual()
document()
build()
check()
?save
dim(data)
getwd()
save(data,file='data.rda',compress=TRUE)
?save
library(tools)
data
resaveRdaFile
?resaveRdaFiles
resaveRdaFiles('~/GithubRepos/Rstudio-Github/imcExperiment/data/',compress='auto')
build_manual()
document()
check()
document()
check()
sessionInfo()
build_manual()
document()
build()
check()
build_manual()
build_vignettes()
build_vignettes()
build_vignette()
build_vignettes()
build_vignettes()
build()
build_manual()
build_vignettes()
install()
build_manual()
build_vignettes()
build_vignettes()
build_vignettes()
library(imcExperiment)
data("imcData")
imc<-imcData
imc
require(Rphenograph)
phenos<-Rphenograph(t(cellIntensity(imc)),k=35)
install.packages("Rcpp")
build_manual()
library(devtools)
build_manual()
build_vignettes()
BiocManager::install("Rphenograph")
install_github("i-cyto/Rphenograph")
library(devtools)
build_vignettes()
??membership
library(igraph)
build_vignettes()
build_manual()
build_vignettes()
library(imcExperiment)
data("imcData")
data(imcData)
is(assay(imcData,'counts'),'matrix')
rownames(imcData)
# for plot scatter to work need to set the rowData feature in a specific way.
channel<-sapply(strsplit(rownames(imcData),"_"),function(x) x[3])
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rownames(imcData)<-marker
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
library(CATALYST)
library(diffcyt)
data(imcData)
head(rownames(imcData))
library(CATALYST)
library(diffcyt)
data(imcData)
head(rownames(imcData))
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
imcData
plotScatter(imcData,rownames(imcData)[1:4],assay='counts')
assays(imcData)
plotScatter(imcData,rownames(imcData)[1:4],assay='counts')
?plotScatter
??plotScatter
channel
marker
rowData(imcData)
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rowData(imcData)
data(imcData)
head(rownames(imcData))
# for plot scatter to work need to set the rowData feature in a specific way.
channel<-sapply(strsplit(rownames(imcData),"_"),function(x) x[3])
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rownames(imcData)<-marker
marker
rownames(imcData)
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
(fsimc <- sce2fcs(imcData, split_by = "ROIID"))
marker
channel
marker
rowData(imcData)
rowData(imcData)%>%data.frame
marker
channel
channel[34:35]<-c("Ir191.1","Ir193.1")
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rownames(imcData)<-marker
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
channel<-sapply(strsplit(rownames(imcData),"_"),function(x) x[3])
channel[34:35]<-c("Ir191.1","Ir193.1")
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rowData(imcData)
data(imcData)
head(rownames(imcData))
# for plot scatter to work need to set the rowData feature in a specific way.
channel<-sapply(strsplit(rownames(imcData),"_"),function(x) x[3])
channel[34:35]<-c("Ir1911","Ir1931")
marker<-sapply(strsplit(rownames(imcData),"_"),function(x) x[2])
rowData(imcData)<-DataFrame(channel_name=channel,marker_name=marker)
rownames(imcData)<-marker
rowData(imcData)
plotScatter(imcData,rownames(imcData)[17:18],assay='counts')
(fsimc <- sce2fcs(imcData, split_by = "ROIID"))
pData(fsimc)
fsApply(fsimc,nrow)
dim(exprs(fsimc[[1]]))
exprs(fsimc[[1]])[1:5,1:5]
bui
build_manual()
build_vignettes()
