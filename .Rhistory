normExp<-percentilenormalize(data=expr,percentile=0.99)
normExp<-as.matrix(normExp)
##spatial component
spatial<-(pre[,c("X_position","Y_position")])
spatial<-as.matrix(spatial)
##uniqueLabel
uniqueLabel<-paste0(pre[,"ImageId"],"_",pre[,"CellId"])
phenotypes<-pre[,grepl("Phenograph",colnames(pre))]
morph<-as.matrix(pre[,c("Area","Eccentricity",
"Solidity",
"Extent",
"Perimeter")])
x<-imcExperiment(cellIntensity=t(expr),
coordinates=spatial,
neighborHood=as.matrix(pre[,grepl("neighbour_",colnames(pre))]),
network=phenotypes,
distance=matrix(1,nrow=nrow(pre),ncol=10),
morphology=morph,
panel=colnames(normExp),
uniqueLabel=uniqueLabel,
ROIID=data.frame(ROIID=pre$ROIID))
##include scaledCounts
x
colnames(x)<-getLabel(x)
assays(x,withDimnames=FALSE)<-SimpleList(counts=t(expr),scaledCounts=t(normExp))
cellData<-DataFrame(pre[,c("ROIID","uniqueLabel","Patient.Number","condition","batch","Age","Cytogenetics","TMA")])
cellData$condition[is.na(cellData$condition)]<-"PRE"
colData(x)<-cellData
head(colData(x))
marker_info<-data.frame(channel_name=sapply(strsplit(rownames(x),"_"),function(x) x[3]),
marker_name=rownames(x),
marker_class=c(rep("type",length(lineage)),
rep("state",length(induc)),
rep("none",length(background))))
#load the clinical sheet
fpath <- system.file("extdata", "key.csv", package="imcExperiment")
key<-read.csv(fpath)
metadata(x)<-list(experiment_info=key)
library(CATALYST)
library(flowCore)
library(SingleCellExperiment)
library(diffcyt)
## from IMCexperiment to SCE
## Switching into Summarized Experiment class.
dse<-SummarizedExperiment(assays=SimpleList(exprs=t(cellIntensity(x))),
rowData=colData(x),
colData=DataFrame(marker_info)
)
stopifnot(all(colnames(dse)==marker_info$marker_name))
dse
rownames(dse)<-rowData(dse)$uniqueLabel
# Transform data recommended
dse <- transformData(dse)
## maybe look a the normalization.
# Generate clusters
dse <- (generateClusters(dse,meta_clustering=TRUE,meta_k=30,seed_clustering=828))
## examine each cluster.
cluster<-rowData(dse)
##construct singleCellExperiment
sce<-SingleCellExperiment(x)
metadata(sce)<-metadata(x)
rowData(sce)<-marker_info
colData(sce)<-colData(x)
colData(sce)$sample_id<-colData(sce)$ROIID
###store min/max normalized counts under 'counts' slot.
assays(sce, withDimnames = FALSE)<-SimpleList(exprs=cellIntensity(x)[rownames(x),],
counts=assays(x)$counts,
scaledCounts=assays(x)$scaledCounts[rownames(x),]
)
sce<-transformData(sce)
##raw counts
dim(counts(sce))
## min/max counts
##SOM clustering
sce <- cluster(sce)
pca_data <- prcomp(t(assays(sce)$exprs), rank=50)
##added the reduced dimensions PCA data.
reducedDims(sce) <- list(PCA=pca_data$x)
sce
plotPbExprs(sce,k="meta15",group_by="cluster_id",color_by="condition")
plotClusterExprs(sce, k = "meta20", features = "type")
# access specific clustering resolution
table(cluster_ids(sce))
plotAbundances(sce, k = "meta20", by = "sample_id", group_by = "condition")
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "meta20",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
plotMultiHeatmap(sce,
hm1 = "type", hm2 = "state",
k = "meta20",
col_dend = c(FALSE, TRUE))
lineage
x
rownames(x)
morph
morphScaled<-percentilenormalize(data=morph,percentile=0.99)
summary(morphScaled)
head(morphScaled)
rownames(expr)
hea rownames(morphScaled)<-rownames(expr)<-rownames(normExp)<-uniqueLabel
rownames(morphScaled)<-rownames(expr)<-rownames(normExp)<-uniqueLabel
head(morphScaled)
x<-imcExperiment(cellIntensity=t(expr),
coordinates=spatial,
neighborHood=as.matrix(pre[,grepl("neighbour_",colnames(pre))]),
network=phenotypes,
distance=matrix(1,nrow=nrow(pre),ncol=10),
morphology=morph,
panel=colnames(normExp),
uniqueLabel=uniqueLabel,
ROIID=data.frame(ROIID=pre$ROIID))
##include scaledCounts
x
colnames(x)<-getLabel(x)
head(x)
rownames(x)
colnames(x)
x<-imcExperiment(cellIntensity=t(expr),
coordinates=spatial,
neighborHood=as.matrix(pre[,grepl("neighbour_",colnames(pre))]),
network=phenotypes,
distance=matrix(1,nrow=nrow(pre),ncol=10),
morphology=morphScaled,
panel=colnames(normExp),
uniqueLabel=uniqueLabel,
ROIID=data.frame(ROIID=pre$ROIID))
##include scaledCounts
x
colnames(x)<-getLabel(x)
assays(x,withDimnames=FALSE)<-SimpleList(counts=t(expr),scaledCounts=t(normExp))
cellData<-DataFrame(pre[,c("ROIID","uniqueLabel","Patient.Number","condition","batch","Age","Cytogenetics","TMA")])
cellData$condition[is.na(cellData$condition)]<-"PRE"
colData(x)<-cellData
head(colData(x))
marker_info<-data.frame(channel_name=sapply(strsplit(rownames(x),"_"),function(x) x[3]),
marker_name=rownames(x),
marker_class=c(rep("type",length(lineage)),
rep("state",length(induc)),
rep("none",length(background))))
#load the clinical sheet
fpath <- system.file("extdata", "key.csv", package="imcExperiment")
key<-read.csv(fpath)
metadata(x)<-list(experiment_info=key)
getMorphology(x)
getMorphology(x)%>%summary
library(magrittr)
getMorphology(x)%>%summary
debug(metaClusterIMC)
x<-metaClusterIMC(imc=x,markers=lineage,plotPCA=FALSE,k2=15,assay="scaledCounts")
roiData
myroi
graph
graph.out
Graph<-data.frame(ID=getLabel(x))
head(Graph)
head(graph.out)
Graph<-data.frame(id=getLabel(x),cluster=NA)
Graph[match(graph.out$id,Graph$id),'cluster']<-graph.out$cluster
Graph[match(graph.out$id,Graph$id),'id']
Graph[match(graph.out$id,Graph$id),'id']==graph.out$id
Graph[match(graph.out$id,Graph$id),'id']==graph.out$id%>%table
Graph[match(graph.out$id,Graph$id),'id']==graph.out$id
table(Graph[match(graph.out$id,Graph$id),'id']==graph.out$id)
roiData<-unique(colData(imc)$ROIID)
Graph<-data.frame(id=getLabel(x),cluster=NA)
for(roi in roiData){
myroi<-subsetCase(imc,roi)
minmax<-t(assays(myroi)[[assay]])
graph<-Rphenograph(minmax[,markers],k=45)
graph.out<-data.frame(id=getLabel(myroi),cluster=as.numeric(membership(graph[[2]])))
Graph[match(graph.out$id,Graph$id),'cluster']<-graph.out$cluster
}
head(Graph)
dim(Graph)
fullExpr=as.data.frame(t(assays(imc)[[assay]]))
fullExpr$ROIID<-colData(imc)$ROIID
fullExpr$Roicluster<-Graph$cluster[match(rownames(fullExpr),Graph$id)]
fullExpr$uniqueLabel<-getLabel(imc)
ErikMeta<-fullExpr[,c(markers,"ROIID","Roicluster")] %>% group_by(ROIID,Roicluster) %>%
dplyr::summarise_all(funs(median)) %>%data.frame
ErikMeta
rownames(fullExpr)
fullExpr=as.data.frame(t(assays(imc)[[assay]]))
head(fullExpr)
tail(fullExpr)
rownames(fullExpr)<-getLabel(imc)
fullExpr$ROIID<-colData(imc)$ROIID
fullExpr$Roicluster<-Graph$cluster[match(rownames(fullExpr),Graph$id)]
head(fullExpr)
fullExpr$uniqueLabel<-getLabel(imc)
ErikMeta<-fullExpr[,c(markers,"ROIID","Roicluster")] %>% group_by(ROIID,Roicluster) %>%
dplyr::summarise_all(funs(median)) %>%data.frame
ErikMeta
erikPheno<- Rphenograph(ErikMeta[,c(markers)], k = k2)
subphenograph_cluster_meta<- factor(membership(erikPheno[[2]]))
table(subphenograph_cluster_meta)
ErikMeta=cbind(ErikMeta, subphenograph_cluster_meta)
myLocal=left_join(fullExpr, ErikMeta[,c("ROIID","Roicluster","subphenograph_cluster_meta")], by = c("ROIID","Roicluster"))
rownames(myLocal)<-rownames(fullExpr)
head(myLocal)
fullNet<-as.data.frame(getNetwork(imc))
fullNet[,"ROILevelCluster"]<-NA
fullNet[,"metaCluster"]<-NA
rownames(fullNet)<-getLabel(imc)
fullNet[match(myLocal$uniqueLabel,rownames(fullNet)),"ROILevelCluster"]<-myLocal[,which(colnames(myLocal)=="Roicluster")]
fullNet[match(myLocal$uniqueLabel,rownames(fullNet)),"metaCluster"]<-myLocal[,which(colnames(myLocal)=="subphenograph_cluster_meta")]
head(fullNet)
table(fullNet$metaCluster)
metaClusterIMC<-function(imc=NULL,markers=NULL,plotPCA=FALSE,k2=15,assay="exprs"){
#imc is the container, must have normcounts assigned.
##markers: the markers to use for clustering.
require(Rphenograph);require(igraph);require(dplyr)
roiData<-unique(colData(imc)$ROIID)
Graph<-data.frame(id=getLabel(x),cluster=NA)
for(roi in roiData){
myroi<-subsetCase(imc,roi)
minmax<-t(assays(myroi)[[assay]])
graph<-Rphenograph(minmax[,markers],k=45)
graph.out<-data.frame(id=getLabel(myroi),cluster=as.numeric(membership(graph[[2]])))
Graph[match(graph.out$id,Graph$id),'cluster']<-graph.out$cluster
}
fullExpr=as.data.frame(t(assays(imc)[[assay]]))
rownames(fullExpr)<-getLabel(imc)
fullExpr$ROIID<-colData(imc)$ROIID
fullExpr$Roicluster<-Graph$cluster[match(rownames(fullExpr),Graph$id)]
fullExpr$uniqueLabel<-getLabel(imc)
ErikMeta<-fullExpr[,c(markers,"ROIID","Roicluster")] %>% group_by(ROIID,Roicluster) %>%
dplyr::summarise_all(funs(median)) %>%data.frame
##Levine used k=15 for meta.
erikPheno<- Rphenograph(ErikMeta[,c(markers)], k = k2)
subphenograph_cluster_meta<- factor(membership(erikPheno[[2]]))
table(subphenograph_cluster_meta)
ErikMeta=cbind(ErikMeta, subphenograph_cluster_meta)
### plot PCA, label each case.  COO,  status.  ##
myLocal=left_join(fullExpr, ErikMeta[,c("ROIID","Roicluster","subphenograph_cluster_meta")], by = c("ROIID","Roicluster"))
rownames(myLocal)<-rownames(fullExpr)
##assign back to Imc container.
fullNet<-as.data.frame(getNetwork(imc))
fullNet[,"ROILevelCluster"]<-NA
fullNet[,"metaCluster"]<-NA
rownames(fullNet)<-getLabel(imc)
fullNet[match(myLocal$uniqueLabel,rownames(fullNet)),"ROILevelCluster"]<-myLocal[,which(colnames(myLocal)=="Roicluster")]
fullNet[match(myLocal$uniqueLabel,rownames(fullNet)),"metaCluster"]<-myLocal[,which(colnames(myLocal)=="subphenograph_cluster_meta")]
getNetwork(imc)<-fullNet
return(imc)
}
x<-metaClusterIMC(imc=x,markers=lineage,plotPCA=FALSE,k2=15,assay="scaledCounts")
getNetwork(x)
getNetwork(x) sce<-SingleCellExperiment(x)
metadata(sce)<-metadata(x)
rowData(sce)<-marker_info
colData(sce)<-colData(x)
colData(sce)$sample_id<-colData(sce)$ROIID
###store min/max normalized counts under 'counts' slot.
assays(sce, withDimnames = FALSE)<-SimpleList(exprs=cellIntensity(x)[rownames(x),],
counts=assays(x)$counts,
scaledCounts=assays(x)$scaledCounts[rownames(x),]
)
sce<-transformData(sce)
##raw counts
dim(counts(sce))
## min/max counts
##SOM clustering
sce <- cluster(sce)
sce<-SingleCellExperiment(x)
metadata(sce)<-metadata(x)
rowData(sce)<-marker_info
colData(sce)<-colData(x)
colData(sce)$sample_id<-colData(sce)$ROIID
###store min/max normalized counts under 'counts' slot.
assays(sce, withDimnames = FALSE)<-SimpleList(exprs=cellIntensity(x)[rownames(x),],
counts=assays(x)$counts,
scaledCounts=assays(x)$scaledCounts[rownames(x),]
)
sce<-transformData(sce)
##raw counts
dim(counts(sce))
## min/max counts
##SOM clustering
sce <- cluster(sce)
metadata(sce)$cluster_codes<-data.frame(custom=factor(unique(getNetwork(x12)[,2])) )
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "custom", fun="mean",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
metadata(sce)$cluster_codes<-data.frame(custom=factor(unique(getNetwork(x)[,2])) )
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "custom", fun="mean",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "custom", fun="median",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
sce
metadata(sce)
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "meta20", fun="median",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
sce <- cluster(sce)
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "meta20",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
?plotExprHeatmap
annotateKey<-data.frame(cluster=seq(1,20),
label=c(                                    "BCell",
"uncharacterized",
"Myeloma",
"Myeloma",
"Myeloma",
"CD4",
"Endothelial",
"TREG",
"NK",
"CD4",
"MAC",
"NK",#12
"MAC",
"BCell",#14
"Myeloid",
"Monocyte",
"NK",
"Myeloid",
"BCell",
"MAC"
))
getLabel(x)
getNetwork(x)
annos<-getNetwork(x)
annos<-data.frame(annos,label=annotateKey$label[match(annos[,"metaCluster"])])
annos<-getNetwork(x)
annos<-cbind(annos,label=annotateKey$label[match(annos[,"metaCluster"])])
annos<-getNetwork(x)
annotateKey$label[match(annos[,"metaCluster"])]
annos<-getNetwork(x)
annos<-data.frame(annos,label=annotateKey$label[match(annos[,"metaCluster"],annotateKey$cluster)])
head(annos)
getNetwork(x)<-annos
factor(unique(getNetwork(x)[,2]
)
)
annotateKey
metadata(sce)$cluster_codes<-annotateKey
metadata(sce)
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "label", fun="median",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
annotateKey$cluster
annotateKey$cluster<-factor(annotateKey$cluster)
annotateKey$label<-factor(annotateKey$label)
metadata(sce)$cluster_codes<-annotateKey
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "label", fun="median",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
normcounts(x)
full.dn4<-as.data.frame(t(assays(x)$scaledCounts))
head(full.dn4)
full.dn4$metaCluster<-getNetwork(x)[,"metaCluster"]
full.dn4$cell.type.new<-getNetwork(x)[,"label"]
head(full.dn4)
plot_clustering_heatmap_wrapper<-function(expr=NULL,
cell_clustering=NULL, cluster_merging = NULL,useMedians=TRUE,useQuantiles=FALSE,
color_clusters=NULL){
## cluster_merging should be character merging vector of 29 or so clusters. this is input from the ANNOTATION object.  not a matched object level.
expr<-as.matrix(expr)
if(useQuantiles==TRUE){
##max min normalization
library(matrixStats)
rng <- colQuantiles(expr, probs = c(0.001, 0.999))
expr01 <- t((t(expr) - rng[, 1]) / (rng[, 2] - rng[, 1]))
expr01[expr01 < 0] <- 0
expr01[expr01 > 1] <- 1
}else{
expr01<-expr
}
if(is.null(color_clusters)==TRUE){
color_clusters <- c("#DC050C", "#FB8072", "#1965B0", "#7BAFDE", "#882E72",
"#B17BA6", "#FF7F00", "#FDB462", "#E7298A", "#E78AC3",
"#33A02C", "#B2DF8A", "#55A1B1", "#8DD3C7", "#A6761D",
"#E6AB02", "#7570B3", "#BEAED4", "#666666", "#999999",
"#aa8282", "#d4b7b7", "#8600bf", "#ba5ce3", "#808000",
"#aeae5c", "#1e90ff", "#00bfff", "#56ff0d", "#ffff00")
}
# Calculate the median expression
library(dplyr)
expr_median <- data.frame(expr, cell_clustering = cell_clustering) %>%
dplyr::group_by(cell_clustering) %>%
dplyr::summarize_all(funs(median))
if(useMedians==TRUE){
expr01_median <- data.frame(expr01, cell_clustering = cell_clustering) %>%
group_by(cell_clustering) %>%
dplyr::summarize_all(funs(median))
}else{
expr01_median <- data.frame(expr01, cell_clustering = cell_clustering) %>%
dplyr::group_by(cell_clustering) %>%
dplyr::summarize_all(funs(mean))
}
# Calculate cluster frequencies
clustering_table <- as.numeric(table(cell_clustering))
print(dim(expr_median))
# This clustering is based on the markers that were used for the main clustering
d <- dist(expr_median[, colnames(expr)], method = "euclidean")
cluster_rows <- hclust(d, method = "average")
expr_heat <- as.matrix(expr01_median[, colnames(expr01)])
rownames(expr_heat) <- expr01_median$cell_clustering
labels_row <- paste0(rownames(expr_heat), " (",
round(clustering_table / sum(clustering_table) * 100, 2), "%)")
labels_col <- colnames(expr_heat)
# Row annotation for the heatmap
annotation_row <- data.frame(cluster = factor(expr01_median$cell_clustering))
rownames(annotation_row) <- rownames(expr_heat)
color_clusters <- color_clusters[1:nlevels(annotation_row$cluster)]
names(color_clusters) <- levels(annotation_row$cluster)
annotation_colors <- list(cluster = color_clusters)
annotation_legend <- FALSE
if(!is.null(cluster_merging)){
annotation_row$cluster_merging <- factor(cluster_merging)
color_clusters <- color_clusters[1:nlevels(factor(cluster_merging))]
names(color_clusters) <- levels(factor(cluster_merging))
annotation_colors$cluster_merging <- color_clusters
annotation_legend <- TRUE
}
# Colors for the heatmap
library(RColorBrewer);library(pheatmap)
color <- colorRampPalette(rev(brewer.pal(n = 9, name = "RdYlBu")))(100)
pheatmap::pheatmap(expr_heat, color = color,
cluster_cols = FALSE, cluster_rows = cluster_rows,
labels_col = labels_col, labels_row = labels_row,
display_numbers = TRUE, number_color = "black",
fontsize = 10, fontsize_number = 7,
annotation_row = annotation_row, annotation_colors = annotation_colors,
annotation_legend = annotation_legend)
}
plot_clustering_heatmap_wrapper(expr=full.dn4[,c(lineage,induc)],
cell_clustering=full.dn4[,"cell.type.new"],
useMedians=TRUE,
useQuantiles=FALSE,
color_clusters=NULL)
plot_clustering_heatmap_wrapper(expr=full.dn4[,c(lineage,induc)],
cell_clustering=full.dn4[,"metaCluster"],
useMedians=TRUE,
useQuantiles=FALSE,
color_clusters=NULL)
seq(1,20)
head(getNetwork(x))
getNetwork(x)$metaCluster
getNetwork(x)$metaCluster%>%unique
annotateKey<-data.frame(cluster=seq(1,13),
label=c(                                    "NK",
"Endothelial",
"BCell",
"TREG",
"Monocyte",
"Myeloid",
"Myeloma", #7
"TREG",
"Myeloma",
"Monocyte",
"Monocyte",
"NK",#12
"TREG" #13
))
annos<-getNetwork(x)
annos<-data.frame(annos,label=annotateKey$label[match(annos[,"metaCluster"],annotateKey$cluster)])
getNetwork(x)<-annos
####plotting labeled
full.dn4<-as.data.frame(t(assays(x)$scaledCounts))
full.dn4$metaCluster<-getNetwork(x)[,"metaCluster"]
full.dn4$cell.type.new<-getNetwork(x)[,"label"]
plot_clustering_heatmap_wrapper(expr=full.dn4[,c(lineage,induc)],
cell_clustering=full.dn4[,"metaCluster"],
useMedians=TRUE,
useQuantiles=FALSE,
color_clusters=NULL)
plot_clustering_heatmap_wrapper(expr=full.dn4[,c(lineage,induc)],
cell_clustering=full.dn4[,"cell.type.new"],
useMedians=TRUE,
useQuantiles=FALSE,
color_clusters=NULL)
annos
getNet  annos<-getNetwork(x)
annos<-getNetwork(x)
head(annos)
annos<-annos[,c(1,2,4)]
colnames(annos)[3]
colnames(annos)[3]<-"label"
getNetwork(x)<-annos
head(annos)
annos<-getNetwork(x)
annos<-data.frame(annos,label=annotateKey$label[match(annos[,"metaCluster"],annotateKey$cluster)])
head(annos)
annos<-annos[,c(1,2)]
getNetwork(x)<-annos
annos<-getNetwork(x)
annos<-data.frame(annos,label=annotateKey$label[match(annos[,"metaCluster"],annotateKey$cluster)])
head(annos)
getNetwork(x)<-annos
full.dn4<-as.data.frame(t(assays(x)$scaledCounts))
full.dn4$metaCluster<-getNetwork(x)[,"metaCluster"]
full.dn4$cell.type.new<-getNetwork(x)[,"label"]
plot_clustering_heatmap_wrapper(expr=full.dn4[,c(lineage,induc)],
cell_clustering=full.dn4[,"cell.type.new"],
useMedians=TRUE,
useQuantiles=FALSE,
color_clusters=NULL)
head(full.dn4)
install.packages("BiocStyle")
BiocManager::install("BiocStyle")
setwd("~\GithubRepos/Rstudio-Github/imcWorkFlow/")
setwd("~/GithubRepos/Rstudio-Github/imcWorkFlow/")
devtools::create("imcWorkFlow")
setwd("~/GithubRepos/")
head(mn)
mn
gc()
