analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
clustering_to_use = "merging2", verbose = FALSE)
diffcyt::topTable(ds_res1, show_logFC=TRUE, format_vals = TRUE)
nn<-data.frame(id=cluster_ids(sce,"meta70"),
label=metadata(sce)$cluster_codes$merging2[match(cluster_ids(sce,"meta70"),metadata(sce)$cluster_codes$meta70)]
)
getNetwork(x)<-data.frame(getNetwork(x),nn)
H<-imcExperimentToHyperFrame(imcExperiment=x,phenotypeToUse = 4)
H
hx<-hextess(H$point[1])
hx<-hextess(H$point[1],1)
H$point[1]
data("swedishpines")
swp
hx<-hextess(swedishpines,1)
plot(hx)
swedishpines
?hextess
hx<-hextess(H$point[1])
Window(H$point[1])
Window(H$point[[1]])
hextess(Window(H$point[[1]]))
hextess(Window(H$point[[1]]),1)
quadratcount(H$point[1])
rescale(H$point[1])
H$point
H$point[1]
H$point[[1]]
rescale(H$point[[1]])
scaledH<-with(H,rescale(point))
scaledH
Q3<-with(H,quadratcount(point,nx=5,ny=5))
Q3
plot(Q3[1])
intensity(Q3[1])
intensity(Q3[[1]])
plot(intensity(Q3[[1]]))
Q3
names(Q3)
Q3[1]
Q3[[1]]
plot(Q3[[1]])
plot(intensity(Q3[[1]]))
plot(intensity(Q3[[1]],image=TRUE))
H
dim(H)
par(mfrow=c(3,3))
H[1:9,]
Q3
Q3[1:9,]
Q3[1:9]
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE)))
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE,title=paste0("ROI:",x))))
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE,name=paste0("ROI:",x))))
?plot
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE,main=paste0("ROI:",x))))
plot(intensity(Q3[[x]],image=TRUE),main=paste0("ROI:",1))
plot(intensity(Q3[[1]],image=TRUE),main=paste0("ROI:",1))
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE),main=paste0("ROI:",x)))
par(mfrow=c(3,3))
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE),main=paste0("ROI:",x)))
## create a hyperframe
##you can append more clinical features to the columns of the sampleDat data.frame.
nn<-data.frame(id=cluster_ids(sce,"meta70"),
label=metadata(sce)$cluster_codes$merging2[match(cluster_ids(sce,"meta70"),metadata(sce)$cluster_codes$meta70)]
)
getNetwork(x)<-data.frame(getNetwork(x),nn)
H<-imcExperimentToHyperFrame(imcExperiment=x,phenotypeToUse = 4)
H
##append clinical information
## explore diagnostics for point patterns.
###quadrat test of inhomogeneity
scaledH<-with(H,rescale(point))
Q3<-with(H,quadratcount(point,nx=5,ny=5))
par(mfrow=c(3,3))
sapply(1:9, function(x) plot(intensity(Q3[[x]],image=TRUE),main=paste0("ROI:",x)))
Q<-with(H,quadrat.test(point,5))
## nearest distance analysis
## other forms of distances.
helper<-function(pp=NULL,i=NULL,j=NULL){
ps<-split(pp)
nnd<-nncross(ps[[i]],ps[[j]])
}
## 1-NN analysis.
## compare cluster 10 to cluster 9
#eachNND<-with(H,helper(pp=point,i="10",j="8"))
## first choose 2 clusters to compare.
# sapply(eachNND,function(x) mean(x[,"dist"]))
## apply nearest distance computations
## apply the G-cross function
## apply the K-function
## I/L function with confidence intervals.
?intensity
i1<-intensity(Q3[[1]],image=TRUE)
i2<-intensity(Q3[[2]],image=TRUE)
i3<-intensity(Q3[[3]],image=TRUE)
i4<-intensity(Q3[[4]],image=TRUE)
i5<-intensity(Q3[[5]],image=TRUE)
i6<-intensity(Q3[[6]],image=TRUE)
par(mfrow=c(3,2))
plot(i1,i2,i3,i4,i5,i6)
par(mfrow=c(3,2))
plot(i1)
plot(i2)
plot(i3)
plot(i4)
plot(i5)
plot(i6)
par(mfrow=c(3,2),mar=c(1,1,1,1))
plot(i1,main="ROI1")
plot(i2,main="ROI1")
plot(i3,main="ROI1")
plot(i4,main="ROI1")
plot(i5,main="ROI1")
plot(i6,main="ROI1")
## create a hyperframe
##you can append more clinical features to the columns of the sampleDat data.frame.
nn<-data.frame(id=cluster_ids(sce,"meta70"),
label=metadata(sce)$cluster_codes$merging2[match(cluster_ids(sce,"meta70"),metadata(sce)$cluster_codes$meta70)]
)
getNetwork(x)<-data.frame(getNetwork(x),nn)
H<-imcExperimentToHyperFrame(imcExperiment=x,phenotypeToUse = 4)
head(H)
##append clinical information
## explore diagnostics for point patterns.
###quadrat test of inhomogeneity
scaledH<-with(H,rescale(point))
Q3<-with(H,quadratcount(point,nx=5,ny=5))
i1<-intensity(Q3[[1]],image=TRUE)
i2<-intensity(Q3[[2]],image=TRUE)
i3<-intensity(Q3[[3]],image=TRUE)
i4<-intensity(Q3[[4]],image=TRUE)
i5<-intensity(Q3[[5]],image=TRUE)
i6<-intensity(Q3[[6]],image=TRUE)
par(mfrow=c(3,2),mar=c(1,1,1,1))
plot(i1,main="ROI1")
plot(i2,main="ROI2")
plot(i3,main="ROI3")
plot(i4,main="ROI4")
plot(i5,main="ROI5")
plot(i6,main="ROI6")
#Q<-with(H,quadrat.test(point,5))
## nearest distance analysis
## other forms of distances.
helper<-function(pp=NULL,i=NULL,j=NULL){
ps<-split(pp)
nnd<-nncross(ps[[i]],ps[[j]])
}
## 1-NN analysis.
## compare cluster 10 to cluster 9
#eachNND<-with(H,helper(pp=point,i="10",j="8"))
## first choose 2 clusters to compare.
# sapply(eachNND,function(x) mean(x[,"dist"]))
## apply nearest distance computations
## apply the G-cross function
## apply the K-function
## I/L function with confidence intervals.
## create a hyperframe
##you can append more clinical features to the columns of the sampleDat data.frame.
nn<-data.frame(id=cluster_ids(sce,"meta70"),
label=metadata(sce)$cluster_codes$merging2[match(cluster_ids(sce,"meta70"),metadata(sce)$cluster_codes$meta70)]
)
getNetwork(x)<-data.frame(getNetwork(x),nn)
H<-imcExperimentToHyperFrame(imcExperiment=x,phenotypeToUse = 4)
head(H)
##append clinical information
## explore diagnostics for point patterns.
###quadrat test of inhomogeneity
scaledH<-with(H,rescale(point))
Q3<-with(H,quadratcount(point,nx=5,ny=5))
i1<-intensity(Q3[[1]],image=TRUE)
i2<-intensity(Q3[[2]],image=TRUE)
i3<-intensity(Q3[[3]],image=TRUE)
i4<-intensity(Q3[[4]],image=TRUE)
i5<-intensity(Q3[[5]],image=TRUE)
i6<-intensity(Q3[[6]],image=TRUE)
par(mfrow=c(3,2),mar=c(1,1,1,1))
plot(i1,main="ROI1")
plot(i2,main="ROI2")
plot(i3,main="ROI3")
plot(i4,main="ROI4")
plot(i5,main="ROI5")
plot(i6,main="ROI6")
#Q<-with(H,quadrat.test(point,5))
## nearest distance analysis
## other forms of distances.
helper<-function(pp=NULL,i=NULL,j=NULL){
ps<-split(pp)
nnd<-nncross(ps[[i]],ps[[j]])
}
## 1-NN analysis.
## compare cluster 10 to cluster 9
#eachNND<-with(H,helper(pp=point,i="10",j="8"))
## first choose 2 clusters to compare.
# sapply(eachNND,function(x) mean(x[,"dist"]))
## apply nearest distance computations
## apply the G-cross function
## apply the K-function
## I/L function with confidence intervals.
devtools::document()
library(imcExperiment)
devtools::build_manual()
devtools::build_manual()
devtools::check_man()
getwd()
devtools::build_manual()
Sys.which("pdflatex")
install.packages("tinytex")
Sys.which("miktex")
tinytex::install_tinytex
tinytex::install_tinytex()
Sys.which("pdflatex")
devtools::build_manual()
devtools::document()
devtools::build_manual()
library(imcExperiment)
showClass("imcExperiment")
#10 cells with 10 proteins
# 10 neighbors
# and square distance matrix
# note that for SCE objects the columns are the cells, and rows are proteins
x<-imcExperiment(cellIntensity=matrix(1,nrow=10,ncol=10),
coordinates=matrix(1,nrow=10,ncol=2),
neighborHood=matrix(1,nrow=10,ncol=10),
network=data.frame(matrix(1,nrow=10,ncol=10)),
distance=matrix(1,nrow=10,ncol=10),
morphology=matrix(1,nrow=10,ncol=10),
uniqueLabel=paste0("A",seq_len(10)),
panel=letters[1:10],
ROIID=data.frame(ROIID=rep("A",10)))
#7 cells with 10 proteins
# but the spatial information is 10 rows and this will fail to build.
#x<-imcExperiment(cellIntensity=matrix(1,nrow=7,ncol=10),
#	coordinates=matrix(1,nrow=10,ncol=2),
#	neighborHood=matrix(1,nrow=10,ncol=20),
#	network=matrix(1,nrow=10,ncol=3),
#	distance=matrix(1,nrow=10,ncol=2),
#	uniqueLabel=rep("A",10),
#	ROIID=data.frame(ROIID=rep("A",10)))
#get cellintensities
cellIntensity(x)
#set intensities
newIn<-matrix(rnorm(100,2,5),nrow=10,ncol=10)
rownames(newIn)<-rownames(x)
colnames(newIn)<-colnames(x)
cellIntensity(x)<-newIn
cellIntensity(x)==newIn
# if we want to store both the raw and normalized values in assays we can.
assays(x,withDimnames = FALSE)$raw<-matrix(1,nrow=10,ncol=10)
#store the normalized values.
cellIntensity(x)<-asinh(counts(x)/0.5)
all(cellIntensity(x)==asinh(assays(x)$counts/0.5))
x
## access the coordinates
getCoordinates(x)
getCoordinates(x)<-matrix(rnorm(20,0,10),nrow=10,ncol=2)
head(  getCoordinates(x))
## access the neighborhood profile.  Note each row must equal the number of cells, but the columns can be extended depending on the radius of interactions.
## access the coordinates
getNeighborhood(x)
getNeighborhood(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=10)
head( getNeighborhood(x))
## get the distance usually a square matrix, or can be just first nearest etc.
getDistance(x)
getDistance(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=10)
head(getDistance(x))
# get morphological features
getMorphology(x)
getMorphology(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=60)
head(getMorphology(x))
## for each cell we can obtain the ROI that it belongs to
rowData(x)
## if we want to add patient features to each ROI we can
metas<-data.frame(ROIID=factor(rep("A",10)),treatment=factor(rep('none',10)))
colData(x)<-DataFrame(metas)
##other slots for covariates
metadata(x)$experiment<-'test'
metadata(x)
library(imcExperiment)
showClass("imcExperiment")
#10 cells with 10 proteins
# 10 neighbors
# and square distance matrix
# note that for SCE objects the columns are the cells, and rows are proteins
x<-imcExperiment(cellIntensity=matrix(1,nrow=10,ncol=10),
coordinates=matrix(1,nrow=10,ncol=2),
neighborHood=matrix(1,nrow=10,ncol=10),
network=data.frame(matrix(1,nrow=10,ncol=10)),
distance=matrix(1,nrow=10,ncol=10),
morphology=matrix(1,nrow=10,ncol=10),
uniqueLabel=paste0("A",seq_len(10)),
panel=letters[1:10],
ROIID=data.frame(ROIID=rep("A",10)))
#7 cells with 10 proteins
# but the spatial information is 10 rows and this will fail to build.
#x<-imcExperiment(cellIntensity=matrix(1,nrow=7,ncol=10),
#	coordinates=matrix(1,nrow=10,ncol=2),
#	neighborHood=matrix(1,nrow=10,ncol=20),
#	network=matrix(1,nrow=10,ncol=3),
#	distance=matrix(1,nrow=10,ncol=2),
#	uniqueLabel=rep("A",10),
#	ROIID=data.frame(ROIID=rep("A",10)))
#get cellintensities
cellIntensity(x)
#set intensities
newIn<-matrix(rnorm(100,2,5),nrow=10,ncol=10)
rownames(newIn)<-rownames(x)
colnames(newIn)<-colnames(x)
cellIntensity(x)<-newIn
cellIntensity(x)==newIn
# if we want to store both the raw and normalized values in assays we can.
assays(x,withDimnames = FALSE)$raw<-matrix(1,nrow=10,ncol=10)
#store the normalized values.
cellIntensity(x)<-asinh(counts(x)/0.5)
all(cellIntensity(x)==asinh(assays(x)$counts/0.5))
x
## access the coordinates
getCoordinates(x)
getCoordinates(x)<-matrix(rnorm(20,0,10),nrow=10,ncol=2)
head(  getCoordinates(x))
## access the neighborhood profile.  Note each row must equal the number of cells, but the columns can be extended depending on the radius of interactions.
## access the coordinates
getNeighborhood(x)
getNeighborhood(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=10)
head( getNeighborhood(x))
## get the distance usually a square matrix, or can be just first nearest etc.
getDistance(x)
getDistance(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=10)
head(getDistance(x))
# get morphological features
getMorphology(x)
getMorphology(x)<-matrix(rnorm(100,1,5),nrow=10,ncol=60)
head(getMorphology(x))
## for each cell we can obtain the ROI that it belongs to
rowData(x)
## if we want to add patient features to each ROI we can
metas<-data.frame(ROIID=factor(rep("A",10)),treatment=factor(rep('none',10)))
colData(x)<-DataFrame(metas)
##other slots for covariates
metadata(x)$experiment<-'test'
metadata(x)
### load the data from package.
library(imcExperiment)
##load the data 1000 cells from IMC experiment.
data(data)
dim(data)
##output from histoCAT to R
expr<-data[,3:36]
normExp<-percentilenormalize(data=expr,percentile=0.99)
normExp<-as.matrix(normExp)
##spatial component
spatial<-(data[,c("X_position","Y_position")])
spatial<-as.matrix(spatial)
##uniqueLabel
uniqueLabel<-paste0(data[,"ImageId"],"_",data[,"CellId"])
phenotypes<-data[,grepl("Phenograph",colnames(data))]
morph<-as.matrix(data[,c("Area","Eccentricity",
"Solidity",
"Extent",
"Perimeter")])
x<-imcExperiment(cellIntensity=t(normExp),
coordinates=spatial,
neighborHood=as.matrix(data[,grepl("neighbour_",colnames(data))]),
network=phenotypes,
distance=matrix(1,nrow=nrow(data),ncol=10),
morphology=morph,
panel=colnames(normExp),
uniqueLabel=paste0(data$ImageId,"_",data$CellId),
ROIID=data.frame(ROIID=data$ImageId))
## explore the container.
dim(assay(x))
colData(x)$treatment<-DataFrame(treatment=rep('none',1000))
head(colData(x))
head( colnames(x))
rownames(x)
## Intensity
all(t(cellIntensity(x))==normExp)
head(t(cellIntensity(x)))
##coordinate
all(getCoordinates(x)==spatial)
head(getCoordinates(x))
#neighbor attraction data form histoCAT
all(getNeighborhood(x)==as.matrix(data[,grepl("neighbour_",colnames(data))]))
head(getNeighborhood((x)))
##phenotype cluster ID
head(getNetwork(x))
all(getNetwork(x)==phenotypes)
###distance calculations
head(getDistance(x))
##morphology
all(getMorphology(x)==morph)
head(getMorphology(x))
##uniqueLabel
head(getLabel(x))
all(getLabel(x)==paste0(data$ImageId,"_",data$CellId) )
### inherited accessor.
pca_data <- prcomp(t(counts(x)), rank=50)
tsDat<-data.frame(tsne.x=data$tSNE4148542692_1,tsne.y=data$tSNE4148542692_2,row.names=colnames(x))
reducedDims(x)<-list(PCA=pca_data$x,TSNE=tsDat)
x
reducedDimNames(x)
dim(reducedDims(x)$PCA)
dim(reducedDims(x)$TSNE)
imc<-x
x<-NULL
### reading in a directory of histoCAT csv files.
##need to reconstruct the fold revised IMC data.
##merges a folder full of histoCAT csv files.
# use morphology and the 1-10 neighbors.
dataSet<-NULL
for(i in c("case8.csv","case5.csv")){
message(i)
fpath <- system.file("extdata", i, package="imcExperiment")
case1<-read.csv(fpath)
proteins<-colnames(case1)[grepl("Cell_",colnames(case1))]
neig<-colnames(case1)[grepl("neighbour_",colnames(case1))][1:10]
case1<-case1[,c("ImageId","CellId","X_position","Y_position",proteins,
"Area",
"Eccentricity",
"Solidity",
"Extent",
"Perimeter",
neig)]
dataSet<-rbind(dataSet,case1)
}
expr<-dataSet[,proteins]
normExp<-percentilenormalize(data=expr,percentile=0.99)
normExp<-as.matrix(normExp)
boxplot(normExp)
##spatial component
spatial<-(dataSet[,c("X_position","Y_position")])
spatial<-as.matrix(spatial)
##uniqueLabel
uniqueLabel<-paste0(dataSet[,"ImageId"],"_",dataSet[,"CellId"])
##not yet assigned
phenotypes<-matrix(0,nrow(dataSet),1)
ROIID=data.frame(ROIID=dataSet[,"ImageId"])
morph<-dataSet[,c("Area",
"Eccentricity",
"Solidity",
"Extent",
"Perimeter")]
x<-imcExperiment(cellIntensity=t(normExp),
coordinates=spatial,
neighborHood=as.matrix(dataSet[,grepl("neighbour_",colnames(dataSet))]),
network=phenotypes,
distance=matrix(1,nrow=nrow(dataSet),ncol=10),
morphology=morph,
panel=colnames(normExp),
uniqueLabel=uniqueLabel,
ROIID=ROIID)
x
#require(Rphenograph); library(igraph)
#phenos<-Rphenograph(t(cellIntensity(x)),k=35)
# pheno.labels<-as.numeric(membership(phenos[[2]]))
# getNetwork(x)<-data.frame(cell_clustering=pheno.labels)
#  head(getNetwork(x))
##plot phenograph
#plot_clustering_heatmap_wrapper(myExperiment=x)
##store the ROIID in the metadata columns.
##access the unique cell labels.
tail(getLabel(x))
roi<-subsetCase(x,372149 )
roi
table(sapply(strsplit(getLabel(roi),"_"),function(x) x[1]))
##you can append more clinical features to the columns of the sampleDat data.frame.
H<-imcExperimentToHyperFrame(imcExperiment=x,phenotypeToUse = 1)
helper<-function(pp=NULL,i=NULL,j=NULL){
ps<-split(pp)
nnd<-nncross(ps[[i]],ps[[j]])
}
## 1-NN analysis.
## compare cluster 10 to cluster 9
#eachNND<-with(H,helper(pp=point,i="10",j="8"))
## first choose 2 clusters to compare.
# sapply(eachNND,function(x) mean(x[,"dist"]))
imcData
head(expr)
data("data")
data
head(data)
colnames(data)
devtools::build_manual()
library(imcExperiment)
?saveRDS
?resaveRdaFiles
tools::checkRdaFile("~/GithubRepos/Rstudio-Github/imcExperiment/data/pre.rda")
checkRdaFiles("~/GithubRepos/Rstudio-Github/imcExperiment/data/pre.rda")
tools::checkRdaFiles("~/GithubRepos/Rstudio-Github/imcExperiment/data/pre.rda")
tools::resaveRdaFiles("~/GithubRepos/Rstudio-Github/imcExperiment/data/pre.rda",comparess="gzip")
tools::resaveRdaFiles("~/GithubRepos/Rstudio-Github/imcExperiment/data/pre.rda",compress="gzip")
head(pre)
data("pre")
head(pre)
dim(pre)
library(imcExperiment)
library(imcExperiment)
data("data")
data
data("pre")
dim(pre)
head(pre)
devtools::document()
data('pre')
head(pre)
table(pre$ROIID)
table(pre$ROIID,pre$batch)
library(imcExperiment)
devtools::document()
?build()
devtools::build_manual()
