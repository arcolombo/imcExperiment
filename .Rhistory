plot(mur$greenstone)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(ggplot2)
library(hrbrthemes)
n_dose<-6
prob.tox<-c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
prob.mtd<-c(0.18,0.32,0.29,0.16,0.03,0.00)
C=1
A=3
## events
P0<-(1-prob.tox)^3
P1<-3*prob.tox*(1-prob.tox)^2
Q0<-P1*P0
##probability of MTD
probMTDi<-function(i=1){
a<- prod(sapply(seq(1,i),function(j) P0[j]+P1[j]*P0[j]))
b<-(1-P0[i+1]-P1[i+1]*P0[i+1])
result<-a*b
return(result)
}
prob.n<-prod(sapply(seq(1,6),function(j) P0[j]+P1[j]*P0[j]))
myResult<-sapply(seq(1,6),function(x) probMTDi(x))
myResult[6]<-prob.n
data<-data.frame(Original=prob.mtd,Reproduced=myResult,dose=1:6)
ggplot(reshape2::melt(data,id="dose"),aes(x=variable,y=value,fill=factor(dose)))+geom_bar(stat='identity')+theme_ipsum()+ggtitle("Original/Reproduced MTD Probability")
print(data)
library(escalation)
max_samp<-30
#table 1 scenario 3 probability of toxicity
skeleton <- c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
target <- 0.25
model <- get_dfcrm(skeleton = skeleton, target = target, model = 'empiric') %>%
stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.95) %>%
stop_when_n_at_dose(dose = 'recommended', n = 30)
num_sims <- 1000
set.seed(123)
sims <- model %>%
simulate_trials(num_sims = num_sims, true_prob_tox = skeleton, next_dose = 1)
sims
library(reshape2)
library(ggplot2)
library(hrbrthemes)
n_dose<-6
prob.tox<-c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
prob.mtd<-c(0.18,0.32,0.29,0.16,0.03,0.00)
C=1
A=3
B=3
##probabilities
head(myResult)
mtdProb=myResult
P0<-(1-prob.tox)^3
P1<-3*prob.tox*(1-prob.tox)^2
Q0<-P1*P0
##1<=j<=n
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=mtdProb){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}
if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}
if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*mtdProb[i]
expect<-c(expect,totalExp)
}
return(sum(expect))
}##function
## expected number of patients
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb))
## expected number of toxicity incidences (TTL)
prob.ttl<-expect*prob.tox
table3<-data.frame(expected_number=expect,expected_toxicity_incidence=prob.ttl)
print(table3)
colSums(table3)
library(reshape2)
library(ggplot2)
library(hrbrthemes)
n_dose<-6
prob.tox<-c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
prob.mtd<-c(0.18,0.32,0.29,0.16,0.03,0.00)
C=1
A=3
## events
P0<-(1-prob.tox)^3
P1<-3*prob.tox*(1-prob.tox)^2
Q0<-P1*P0
##probability of MTD
probMTDi<-function(i=1){
a<- prod(sapply(seq(1,i),function(j) P0[j]+P1[j]*P0[j]))
b<-(1-P0[i+1]-P1[i+1]*P0[i+1])
result<-a*b
return(result)
}
prob.n<-prod(sapply(seq(1,6),function(j) P0[j]+P1[j]*P0[j]))
myResult<-sapply(seq(1,6),function(x) probMTDi(x))
myResult[6]<-prob.n
data<-data.frame(Original=prob.mtd,Reproduced=myResult,dose=1:6)
ggplot(reshape2::melt(data,id="dose"),aes(x=variable,y=value,fill=factor(dose)))+geom_bar(stat='identity')+theme_bw()+ggtitle("Original/Reproduced MTD Probability")
print(data)
?get_dfcrm
skeleton <- c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
target <- 0.25
model <- get_dfcrm(skeleton = skeleton, target = target, model = 'logistic') %>%
stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.95) %>%
stop_when_n_at_dose(dose = 'recommended', n = 6)
num_sims <- 100
set.seed(123)
sims <- model %>%
simulate_trials(num_sims = num_sims, true_prob_tox = skeleton, next_dose = 1)
sims
model <- get_dfcrm(skeleton = skeleton, target = target, model = 'logistic') %>%
stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.8) %>%
stop_when_n_at_dose(dose = 'recommended', n = 6)
num_sims <- 100
set.seed(123)
sims <- model %>%
simulate_trials(num_sims = num_sims, true_prob_tox = skeleton, next_dose = 1)
sims
library(escalation)
max_samp<-30
#table 1 scenario 3 probability of toxicity
skeleton <- c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
target <- 0.25
model <- get_dfcrm(skeleton = skeleton, target = target, model = 'logistic') %>%
stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.8) %>%
stop_when_n_at_dose(dose = 'recommended', n = 6)
num_sims <- 100
set.seed(123)
sims <- model %>%
simulate_trials(num_sims = num_sims, true_prob_tox = skeleton, next_dose = 1)
sims
library(reshape2)
library(ggplot2)
library(hrbrthemes)
n_dose<-6
prob.tox<-c(0.05, 0.15, 0.25, 0.35, 0.50, 0.70)
prob.mtd<-c(0.18,0.32,0.29,0.16,0.03,0.00)
C=1
A=3
## events
P0<-(1-prob.tox)^3
P1<-3*prob.tox*(1-prob.tox)^2
Q0<-P1*P0
##probability of MTD
probMTDi<-function(i=1){
a<- prod(sapply(seq(1,i),function(j) P0[j]+P1[j]*P0[j]))
b<-(1-P0[i+1]-P1[i+1]*P0[i+1])
result<-a*b
return(result)
}
prob.n<-prod(sapply(seq(1,6),function(j) P0[j]+P1[j]*P0[j]))
myResult<-sapply(seq(1,6),function(x) probMTDi(x))
myResult[6]<-prob.n
data<-data.frame(Original=prob.mtd,Reproduced=myResult,dose=1:6)
ggplot(reshape2::melt(data,id="dose"),aes(x=variable,y=value,fill=factor(dose)))+geom_bar(stat='identity')+theme_bw()+ggtitle("Original/Reproduced MTD Probability")
print(data)
myResult
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=mtdProb){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}else if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}else if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*prob.mtd[i]
expect<-c(expect,totalExp)
}
}
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=mtdProb){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}else if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}else if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*prob.mtd[i]
expect<-c(expect,totalExp)
}
return(sum(expect))
}##function
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=NULL){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}else if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}else if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*mtdProb[i]
expect<-c(expect,totalExp)
}
return(sum(expect))
}##function
## expected number of patients
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=prob.tox))
expect
P0
P1
P0<-(1-prob.tox)^3
P1<-3*prob.tox*(1-prob.tox)^2
Q0<-P1*P0
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=NULL){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}else if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}else if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*mtdProb[i]
expect<-c(expect,totalExp)
}
return(sum(expect))
}##function
## expected number of patients
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=prob.tox))
expect
expected_dose_j<-function(j=1,P0,P1,Q0,mtdProb=NULL){
stopifnot(j>=1 & j<=n_dose)
expect<-NULL
for(i in 0:n_dose){
if(j==i+1){
#print("A")
cond.exp<-(3*(1-P0[j]-P1[j])+6*(P1[j]-P1[j]*P0[j]))/(1-P0[j]-P1[j]*P0[j])
}else if(j<=i){
#print("B")
cond.exp<-(3*P0[j]+6*P1[j]*P0[j])/(P0[j]+P1[j]*P0[j])
}else if(j>i+1){
#print("C")
cond.exp<-0
}
totalExp<-cond.exp*mtdProb[i]
expect<-c(expect,totalExp)
}
return(sum(expect))
}##function
prob.tox
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=prob.tox))
expect
mtdProb
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=mtdProb))
expect
mtdProb
mtdProb[1]
mtdProb[1]<-0.18000
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=mtdProb))
expect
mtdProb[1]<-0.1849
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=mtdProb))
expect
mtdProb=myResult
mtdProb
expect<-sapply(seq(1,6),function(j)  expected_dose_j(j=j,P0,P1,Q0,mtdProb=mtdProb))
## expected number of toxicity incidences (TTL)
prob.ttl<-expect*prob.tox
prob.ttl
ei<-c(target_tox-e1,target_tox+e2)
ei
target_tox<-0.25
e1<-0.05
e2<-0.05
ei<-c(target_tox-e1,target_tox+e2)
target_tox
ei
pt<-0.25
e1<-0.05
e2<-0.05
ei<-c(pt-e1,pt+e2)
runif
runif(6,min=0,max=1)
1/(1-pt-e2)
runif(6,min=0,max=1)
priorP<-NULL
p1<-runif(1,min=0,max=1)
p2<-runif(p1,min=p1,max=1)
p3<-runif(p2,min=p1,max=1)
p4<-runif(p3,min=p1,max=1)
p5<-runif(p4,min=p1,max=1)
p6<-runif(p5,min=p1,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
priorP<-NULL
p1<-runif(1,min=0,max=1)
p2<-runif(1,min=p1,max=1)
p3<-runif(1,min=p2,max=1)
p4<-runif(1,min=p3,max=1)
p5<-runif(1,min=p4,max=1)
p6<-runif(1,min=p5,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
priorP<-NULL
p1<-runif(1,min=0,max=0.15)
p2<-runif(1,min=p1,max=0.25)
p3<-runif(1,min=p2,max=0.35)
p4<-runif(1,min=p3,max=0.50)
p5<-runif(1,min=p4,max=0.65)
p6<-runif(1,min=p5,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
priorP<-NULL
p1<-runif(1,min=0,max=0.2)
p2<-runif(1,min=p1,max=0.35)
p3<-runif(1,min=p2,max=0.55)
p4<-runif(1,min=p3,max=0.65)
p5<-runif(1,min=p4,max=0.75)
p6<-runif(1,min=p5,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
priorP<-NULL
p1<-runif(1,min=0,max=0.2)
p2<-runif(1,min=p1,max=0.35)
p3<-runif(1,min=p2,max=0.55)
p4<-runif(1,min=p3,max=0.70)
p5<-runif(1,min=p4,max=0.85)
p6<-runif(1,min=p5,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
LD_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
ND<- 1/(pt-e1)
penalty<-ND
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
KD<- 1/(e1+e2)
penalty<-KD
}else if( (pi-pt)>e2){
penalty<-0
}
return(penalty)
}
##stay
LS_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
NS<-1/(pt-e1)
penalty<-NS
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
penalty<-0
}else if( (pi-pt)>e2){
MS<- 1/(1-pt-e2)
penalty<-MS
}
return(penalty)
}
##escalate2
LE_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
penalty<-0
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
KE<-1/(e1+e2)
penalty<-KE
}else if( (pi-pt)>e2){
ME<- 1/(1-pt-e2)
penalty<-ME
}
return(penalty)
}
PD_pi(pi=priorP[1],pt=pt,e1=e1,e2=e2)
LD_pi(pi=priorP[1],pt=pt,e1=e1,e2=e2)
priorP[1]-pt
priorP[1]-pt<(-1*e1)
priorP[1]-pt>e2
1/(pt-e1)
rbinom
rbinom(3,size=30,prob=p1)
rbinom(3,size=30,prob=priorP[1])
rbinom(1,size=3,prob=priorP[1])
rbinom(1,size=3,prob=priorP[1])
rbinom(1,size=3,prob=priorP[1])
?rbinom
rbinom(3,size=3,prob=priorP[1])
rbinom(3,size=5,prob=priorP[1])
rbinom(1,size=5,prob=priorP[1])
rbinom(10,size=5,prob=priorP[1])
rbinom(1,size=5,prob=priorP[1])
rbinom(1,size=2,prob=priorP[1])
rbinom(1,size=2,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(1,size=2,prob=0.5)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=0.5)
rbinom(1,size=10,prob=priorP)
rbinom(6,size=10,prob=priorP)
rbinom(6,size=3,prob=priorP)
rbinom(6,size=3,prob=priorP[1])
rbinom(1,size=3,prob=priorP[1])
rbinom(1,size=10,prob=priorP[1])
rbinom(2,size=10,prob=priorP[1])
rbinom(3,size=10,prob=priorP[1])
rbinom(3,size=10,prob=priorP[1])
rbinom(3,size=10,prob=priorP[1])
rbinom(3,size=10,prob=priorP[1])
rbinom(3,size=5,prob=priorP[1])
rbinom(1000,size=5,prob=priorP[1])
hist(rbinom(1000,size=5,prob=priorP[1]))
hist(rbinom(2000,size=5,prob=priorP[1]))
hist(rbinom(2000,size=20,prob=priorP[1]))
hist(rbinom(2000,size=40,prob=priorP[1]))
hist(rbinom(2000,size=60,prob=priorP[1]))
hist(rbinom(2000,size=30,prob=priorP[1]))
hist(rbinom(5000,size=30,prob=priorP[1]))
hist(rbinom(1000,size=30,prob=priorP[1]))
rbinom(1000,size=30,prob=priorP[1]))
rbinom(1000,size=30,prob=priorP[1])
rbinom(1000,size=30,prob=priorP[1])
?pbinom
knitr::opts_chunk$set(echo = TRUE)
pt<-0.25
e1<-0.05
e2<-0.05
ei<-c(pt-e1,pt+e2)
n_dose<-6
LD_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
ND<- 1/(pt-e1)
penalty<-ND
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
KD<- 1/(e1+e2)
penalty<-KD
}else if( (pi-pt)>e2){
penalty<-0
}
return(penalty)
}
##stay
LS_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
NS<-1/(pt-e1)
penalty<-NS
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
penalty<-0
}else if( (pi-pt)>e2){
MS<- 1/(1-pt-e2)
penalty<-MS
}
return(penalty)
}
##escalate2
LE_pi<-function(pi=NULL,pt=NULL,e1=NULL,e2=NULL){
if(pi-pt<(-1*e1)){
penalty<-0
}else if((-1*e1)<=(pi-pt) & (pi-pt)<=e2){
KE<-1/(e1+e2)
penalty<-KE
}else if( (pi-pt)>e2){
ME<- 1/(1-pt-e2)
penalty<-ME
}
return(penalty)
}
## to start uses uniform independent prior for pi.
### 6 doses  of which p1<p2<p3<p4<..<p5  (pg 655)
priorP<-NULL
p1<-runif(1,min=0,max=0.2)
p2<-runif(1,min=p1,max=0.35)
p3<-runif(1,min=p2,max=0.55)
p4<-runif(1,min=p3,max=0.70)
p5<-runif(1,min=p4,max=0.85)
p6<-runif(1,min=p5,max=1)
priorP<-c(p1,p2,p3,p4,p5,p6)
priorP
set.seed(9112021)
rbinom
?rbinom
rbinom(3,prob=priorP[1])
rbinom(3,3,prob=priorP[1])
n1=3
dose_i<-1
xi<-rbinom(3,3,prob=priorP[1])
rbinom(30,3,prob=priorP[1])
