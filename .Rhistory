table(colData(imcData)$ROIID)
(fsimc <- sce2fcs(imcData, split_by = "ROIID"))
## now we have a flowSet.
pData(fsimc)
fsApply(fsimc,nrow)
dim(exprs(fsimc[[1]]))
exprs(fsimc[[1]])[1:5,1:5]
## set up the metadata files.
marker_info<-data.frame(channel_name=channel,
marker_name=marker,
marker_class=c(rep("type",14),
rep("state",17)))
pData(fsimc)$sample_id<-sapply(strsplit(pData(fsimc)$name,"_"),function(x) x[2])
##need the experimental information containing, HANS, C1-C5
##CHAPUY REVISION : 10-15 extending all the chapuy mutations.
c1<-c("BCL6","BCL10","TNFAIP3","UBE2A","CD70","B2M","NOTCH2","TMEM30A","FAS","TP63","ZEB2","HLAB","SPEN","PDL1")
c1.rank<-c(1,2,3,4,5,6,7,8,9,11,12,13,14,15)
c1.dataFrame<-data.frame(gene=c1,Rank=c1.rank,cluster='C1',contained=FALSE)
c2<-c("TP53")
c2.rank<-1
c2.dataFrame<-data.frame(gene=c2,Rank=c2.rank,cluster='C2',contained=FALSE)
c3<-c("BCL2","CREBBP","EZH2","KMT2D","TNFRSF14","HVCN1","IRF8","GNA13","MEF2B","PTEN")
c3.rank<-c(seq(1,length(c3)))
c3.dataFrame<-data.frame(gene=c3,Rank=c3.rank,cluster='C3',contained=FALSE)
c4<-c("SGK1","HIST1H1E","NFKBIE","BRAF","CD83","NFKBIA","CD58","HIST1H2BC","STAT3","HIST1H1C","ZFP36L1","KLHL6","HIST1H1D","HIST1H1B","ETS1","TOX","HIST1H2AM","HIST1H2BK","RHOA","ACTB","LTB","SF3B1","CARD11","HIST1H2AC")
c4.rank<-seq(1,length(c4))
c4.dataFrame<-data.frame(gene=c4,Rank=c4.rank,cluster='C4',contained=FALSE)
c5<-c("CD79B","MYD88","ETV6","PIM1","TBL1XR1","GRHPR","ZC3H12A","HLAA","PRDM1","BTG1")
c5.rank<-c(3,5,6,8,10,12,13,16,17,18)
c5.dataFrame<-data.frame(gene=c5,Rank=c5.rank,cluster='C5',contained=FALSE)
##read in the mutational data.
clinic<-mutationClinicalSheetAssembly(mutationsToGather=c(c1,c2,c3,c4,c5),full.dn4=full.dn4)
any(clinic$Run.ID%in%ndROI)
## Table for which mutations were found or not found.
#  mutations<-read.csv("~/Documents/imageAnalysis/DLBCL/monirath/myData/mutational-genomic-table/TMA CGI genomic data.csv",header=TRUE)
mutations<-read.csv("~/IMC-Ranalysis/DLBCL/monirath/myData/mutational-genomic-table/TMA CGI genomic data.csv")
c1.dataFrame[c1.dataFrame$gene%in%unique(mutations[,8]),'contained']<-TRUE
c2.dataFrame[c2.dataFrame$gene%in%unique(mutations[,8]),'contained']<-TRUE
c3.dataFrame[c3.dataFrame$gene%in%unique(mutations[,8]),'contained']<-TRUE
c4.dataFrame[c4.dataFrame$gene%in%unique(mutations[,8]),'contained']<-TRUE
c5.dataFrame[c5.dataFrame$gene%in%unique(mutations[,8]),'contained']<-TRUE
clusterData<-rbind(c1.dataFrame,c2.dataFrame,c3.dataFrame,c4.dataFrame,c5.dataFrame)
## REVISION 10-20 hans mutation association with C1-C5.
### HANS association with each mutation class logistic regression.
clinic$C1.count<-rowSums(clinic[,colnames(clinic)%in%c1])
clinic$C2.count<-(clinic[,colnames(clinic)%in%c2])
clinic$C3.count<-rowSums(clinic[,colnames(clinic)%in%c3])
clinic$C4.count<-rowSums(clinic[,colnames(clinic)%in%c4])
clinic$C5.count<-rowSums(clinic[,colnames(clinic)%in%c5])
##ngcb
clinic$NGCB.bin<-ifelse(clinic$Cell.of.origin..HANS.=='NGCB',1,0)
clinic$Case_Number<-as.numeric(substr(clinic$Case_ID,6,7))
##chapuy binary.
clinic$C1<-ifelse(clinic[,'C1.count']>0,1,0)
clinic$C2<-ifelse(clinic[,'C2.count']>0,1,0)
clinic$C3<-ifelse(clinic[,'C3.count']>0,1,0)
clinic$C4<-ifelse(clinic[,'C4.count']>0,1,0)
clinic$C5<-ifelse(clinic[,'C5.count']>0,1,0)
clinic$Treatment.Category[which(clinic$Treatment.Category=="sur+chemo")]<-"SUR+CHEMO"
clinic$X9p24.gain.status[which(is.na(clinic$X9p24.gain.status))]<-0
clinic<-clinic[match(pData(fsimc)$sample_id,clinic$Run.ID),]
all(clinic$Run.ID==pData(fsimc)$sample_id)
##match the column data of the fsimc
exper_info<-data.frame(NGCB=ifelse(clinic$Cell.of.origin..HANS.[match(pData(fsimc)$sample_id,clinic$Run.ID)]=='NGCB',1,0),
group_id=clinic$Response.category[match(pData(fsimc)$sample_id,clinic$Run.ID)],
C1=clinic$C1[match(pData(fsimc)$sample_id,clinic$Run.ID)],
C2=clinic$C2[match(pData(fsimc)$sample_id,clinic$Run.ID)],
C3=clinic$C3[match(pData(fsimc)$sample_id,clinic$Run.ID)],
C4=clinic$C4[match(pData(fsimc)$sample_id,clinic$Run.ID)],
C5=clinic$C5[match(pData(fsimc)$sample_id,clinic$Run.ID)],                                                                  patient_id=clinic$Case_ID[match(pData(fsimc)$sample_id,clinic$Run.ID)],
highIPI=ifelse(clinic$ipi[match(pData(fsimc)$sample_id,clinic$Run.ID)]>=3,1,0),
high9p24.gain=ifelse(clinic$X9p24.gain.status[match(pData(fsimc)$sample_id,clinic$Run.ID)]>1,1,0),
highcmyc.category=ifelse(clinic$cmyc.category[match(pData(fsimc)$sample_id,clinic$Run.ID)]>=3,1,0),
myc.rearrange=ifelse(clinic$MYC.Rearrange[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="pos",1,0),
nonHisp=ifelse(clinic$Ethnicity[match(pData(fsimc)$sample_id,clinic$Run.ID)]!="Hisp",1,0),
BCL6=clinic$BCL6[match(pData(fsimc)$sample_id,clinic$Run.ID)],
BCL2=clinic$BCL2[match(pData(fsimc)$sample_id,clinic$Run.ID)],
TP53=clinic$TP53[match(pData(fsimc)$sample_id,clinic$Run.ID)],
SGK1=clinic$SGK1[match(pData(fsimc)$sample_id,clinic$Run.ID)],
CD79b=clinic$CD79B[match(pData(fsimc)$sample_id,clinic$Run.ID)],
MYD88L265P=clinic$MYD88.L265P[match(pData(fsimc)$sample_id,clinic$Run.ID)],
LDH=ifelse(clinic$ldh[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="H",1,0),
Gender=ifelse(clinic$Gender[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="M",1,0),
AgeHigh=ifelse(clinic$Age[match(pData(fsimc)$sample_id,clinic$Run.ID)]>60,1,0),
BurkittLite=ifelse(clinic$Morphologic.variants[match(pData(fsimc)$sample_id,clinic$Run.ID)]!="CB",1,0),
FOXP1Score=ifelse(clinic$FOXP1.expression.score[match(pData(fsimc)$sample_id,clinic$Run.ID)]>9,1,0),
myc.gain=ifelse(clinic$MYC.Gain[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="pos",1,0),
p53=ifelse(clinic$p53[match(pData(fsimc)$sample_id,clinic$Run.ID)]>=2,1,0),
SurgeryOnly=ifelse(clinic$Treatment.Category[match(pData(fsimc)$sample_id,clinic$Run.ID)]!="SUR+CHEMO",1,0),
##adding mutation groups?
##C1
CD70=clinic$CD70[match(pData(fsimc)$sample_id,clinic$Run.ID)],
NOTCH2=clinic$NOTCH2[match(pData(fsimc)$sample_id,clinic$Run.ID)],
#C3
CREBBP=clinic$CREBBP[match(pData(fsimc)$sample_id,clinic$Run.ID)],
EZH2=clinic$EZH2[match(pData(fsimc)$sample_id,clinic$Run.ID)],
KMT2D=clinic$KMT2D[match(pData(fsimc)$sample_id,clinic$Run.ID)],
IRF8=clinic$IRF8[match(pData(fsimc)$sample_id,clinic$Run.ID)],
##C4
HIST1H1E=clinic$HIST1H1E[match(pData(fsimc)$sample_id,clinic$Run.ID)],
STAT3=clinic$STAT3[match(pData(fsimc)$sample_id,clinic$Run.ID)],
HIST1H1B=clinic$HIST1H1B[match(pData(fsimc)$sample_id,clinic$Run.ID)],
ETS1=clinic$ETS1[match(pData(fsimc)$sample_id,clinic$Run.ID)],
##C5
PIM1=clinic$PIM1[match(pData(fsimc)$sample_id,clinic$Run.ID)],
TBL1XR1=clinic$TBL1XR1[match(pData(fsimc)$sample_id,clinic$Run.ID)],
##stage and nodal involvement
Stage34=ifelse(clinic$Stage_g[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="IV"| clinic$Stage_g[match(pData(fsimc)$sample_id,clinic$Run.ID)]=="III",1,0),
NodalInvolve=ifelse(clinic$Extra.nodal.involvement[match(pData(fsimc)$sample_id,clinic$Run.ID)]==">1",1,0),
PDL1High.ihc=ifelse(clinic$OVERALL.PD.L1.IHC.SCORE==3 &clinic$RNAScope.PDL1.score..0.4.>1,1,0),
X9p24.gain.status=ifelse(clinic$X9p24.gain.status>=2,1,0),
doubleExpressor=ifelse(clinic$bcl2==1 & clinic$cmyc.category>=3,1,0),
sample_id=pData(fsimc)$name)
### we assign missing phenotypes to the average.
cluster.counts<-as.data.frame.matrix(table(full.dn4$ROIID,full.dn4$annotated.label.simple_akil))
for(j in 1:ncol(cluster.counts)){
id<-which(cluster.counts[,j]==0)
id2<-cluster.counts[,j]!=0
if(length(id)>0){
cluster.counts[id,j]<-round(mean(cluster.counts[id2,j]))
}
}
cluster.counts<-100*cluster.counts/rowSums(cluster.counts)
cluster.counts$Case_ID<-clinic$Case_ID[match(rownames(cluster.counts),clinic$Run.ID)]
cluster.counts<-left_join(cluster.counts,clinic[!duplicated(clinic$Case_ID),c("Case_ID","Case_Number","C1.count", "C2.count", "C3.count", "C4.count", "C5.count",'ipi','NGCB.bin','Cell.of.origin..HANS.','Response.category')],by='Case_ID')
cluster.counts$C1<-ifelse(cluster.counts$C1.count!=0,1,0)
cluster.counts$C2<-ifelse(cluster.counts$C2.count!=0,1,0)
cluster.counts$C3<-ifelse(cluster.counts$C3.count!=0,1,0)
cluster.counts$C4<-ifelse(cluster.counts$C4.count!=0,1,0)
cluster.counts$C5<-ifelse(cluster.counts$C5.count!=0,1,0)
cluster.counts$IPI.median.cut<-ifelse(cluster.counts$ipi>median(cluster.counts$ipi),1,0)
cluster.counts$HANS<-factor(cluster.counts[,'Cell.of.origin..HANS.'])
cluster.counts$NGCB.binary<-ifelse(cluster.counts$HANS=='NGCB',1,0)
cluster.counts$Case_Number<-factor(cluster.counts$Case_Number)
cluster.counts$IPI.median.cut<-ifelse(cluster.counts$ipi>median(cluster.counts$ipi),1,0)
### dropping ND subjects
x2<-selectCases(x,as.character(clinic$Run.ID[which(clinic$chemo!='ND')]))
any(colData(x2)$ROIID%>%unique%in%ndROI)
sapply(strsplit(colnames(x2),"_"),function(x) x[1])%in%ndROI %>%any
sce<-SingleCellExperiment(x2)
exper_info2<-exper_info[!exper_info$sample_id%in%paste0("ROIID_",ndROI),]
exper_info2$sample_id%in%paste0("ROIID_",ndROI)%>%any
###measure CPM.
# tum.pheno<-c("InflamTumor","Tumor")
# tme.counts<-t(cluster.counts[,c(1:14,16:18)])
# y <- edgeR::DGEList(counts=tme.counts,group=cluster.counts$HANS,samples=cluster.counts$Case_ID)
# y<-edgeR::estimateDisp(y,model.matrix(~C1+C2+C3+C4+C5+IPI.median.cut+NGCB.bin+Response.category,cluster.counts))
# y<-edgeR::calcNormFactors(y)
##can run diffcyt on SCE with pre-determined clusters of interest.
##need to complete the SCE.
##metadata needs to be a list!
metadata(sce)<-list(experiment_info=exper_info2)
rowData(sce)<-DataFrame(channel_name=channel, marker_name=marker,marker_class=c(rep("type",14),
rep("state",17)))
##assign colData (each cell, this is cell level)
colD<-DataFrame(id=colnames(sce),
sample_id=paste0("ROIID_",sapply(strsplit(colnames(sce),"_"),function(x) x[1])))
colD$HANS<-metadata(sce)$HANS[match(colD$sample_id,metadata(sce)$sample_id)]
colD$group_id<-metadata(sce)$group_id[match(colD$sample_id,metadata(sce)$sample_id)]
colD$C1<-metadata(sce)$C1[match(colD$sample_id,metadata(sce)$sample_id)]
colD$C2<-metadata(sce)$C2[match(colD$sample_id,metadata(sce)$sample_id)]
colD$C3<-metadata(sce)$C3[match(colD$sample_id,metadata(sce)$sample_id)]
colD$C4<-metadata(sce)$C4[match(colD$sample_id,metadata(sce)$sample_id)]
colD$C5<-metadata(sce)$C5[match(colD$sample_id,metadata(sce)$sample_id)]
colD$patient_id<-metadata(sce)$patient_id[match(colD$sample_id,metadata(sce)$sample_id)]
colData(sce)<-colD
table(metadata(sce)$experiment_info[,"SurgeryOnly"])
assays(sce, withDimnames = FALSE)<-SimpleList(exprs=(assays(x2)$counts))
sce<-transformData(sce)
##SOM clustering
sce <- cluster(sce)
# view all available clustering
#names(cluster_codes(sce))
## input the meta clustering from phenograph into cluster_id
colData(sce)$cluster_id<-factor(full.dn4$annotated.label.simple_akil[match(colData(sce)$id,full.dn4$uniqueLabel)])
metadata(sce)$cluster_codes<-data.frame(custom=factor(levels(colData(sce)$cluster_id),levels=levels(colData(sce)$cluster_id)  ) )
colData(sce)$HANS<-metadata(sce)$experiment_info$NGCB[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$REF<-metadata(sce)$experiment_info$group_id[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$C1<-metadata(sce)$experiment_info$C1[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$C2<-metadata(sce)$experiment_info$C2[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$C3<-metadata(sce)$experiment_info$C3[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$C4<-metadata(sce)$experiment_info$C4[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
colData(sce)$C5<-metadata(sce)$experiment_info$C5[match(colData(sce)$sample_id,metadata(sce)$experiment_info$sample_id)]
# access specific clustering resolution
table(cluster_ids(sce, "custom"))
#plotAbundances(sce, k = "custom", by = "sample_id", group_by = "HANS")
plotExprHeatmap(sce, features = "type",
by = "cluster_id", k = "custom",
scale = "first", q = 0.01, perc = TRUE, col_dend = FALSE)
plotMultiHeatmap(sce,
hm1 = "type", hm2 = "state",
k = "custom",
col_dend = c(FALSE, TRUE))
##generate CPM
res_IPI.LDH <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DA",
method_DA = "diffcyt-DA-GLMM",
min_cells=10,
min_samples=1,
normalize=TRUE,
formula = formula,
# design=design,
plot=TRUE,
# contrast=createContrast(c(0,0,0,0,0,0,0,0,1,0,0,0,-1/2,0,-1/2,0,0,0,0,rep(0,7))),
contrast = createContrast(c(0,0,0,0,0,0,0,0,1,0,0,0,-1/2,0,-1/2,0,0,0,0)),
verbose = FALSE)
d_counts <- assays(res_IPI.LDH$d_counts)[["counts"]]
norm_factors <- edgeR::calcNormFactors(assays(res_IPI.LDH$d_counts)[["counts"]],method="TMM")
y <- edgeR::DGEList(d_counts, norm.factors = norm_factors)
##log CPM
lcpm<-asinh(t(edgeR::cpm(y)))%>%as.data.frame
###append the clinical data.
lcpm$Case_ID<-clinic$Case_ID[match(rownames(lcpm),paste0("ROIID_",clinic$Run.ID))]
lcpm<-left_join(lcpm,clinic[!duplicated(clinic$Case_ID),c("Case_ID","Case_Number","C1.count", "C2.count", "C3.count", "C4.count", "C5.count",'ipi','NGCB.bin','Cell.of.origin..HANS.','Response.category')],by='Case_ID')
lcpm$C1<-ifelse(lcpm$C1.count!=0,1,0)
lcpm$C2<-ifelse(lcpm$C2.count!=0,1,0)
lcpm$C3<-ifelse(lcpm$C3.count!=0,1,0)
lcpm$C4<-ifelse(lcpm$C4.count!=0,1,0)
lcpm$C5<-ifelse(lcpm$C5.count!=0,1,0)
lcpm$IPI.median.cut<-ifelse(lcpm$ipi>median(lcpm$ipi),1,0)
lcpm$HANS<-factor(lcpm[,'Cell.of.origin..HANS.'])
lcpm$NGCB.binary<-ifelse(lcpm$HANS=='NGCB',1,0)
lcpm$Case_Number<-factor(lcpm$Case_Number)
####number of cells.
#    plotAbundances(sce, k = "custom", by = "sample_id", group_by = "HANS")
n_cells <- colData(sce)%>%as.data.frame%>%group_by(cluster_id,sample_id,.drop=FALSE) %>% tally
n_cells$HANS<-exper_info$NGCB[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$response<-exper_info$group_id[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$C1<-exper_info$C1[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$C2<-exper_info$C2[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$C3<-exper_info$C3[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$C4<-exper_info$C4[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$C5<-exper_info$C5[match(n_cells$sample_id,exper_info$sample_id)]
n_cells$highIPI<-exper_info$highIPI[match(n_cells$sample_id,exper_info$sample_id)]
###expsress data
exprClust<-as.data.frame(t(assays(sce)[[1]]))
exprClust$sample_id<-colData(sce)$sample_id
exprClust$cluster_id<-colData(sce)$cluster_id
exprClust$HANS<-colData(sce)$HANS
exprClust$REF<-colData(sce)$REF
exprClust$C1<-colData(sce)$C1
exprClust$C2<-colData(sce)$C2
exprClust$C3<-colData(sce)$C3
exprClust$C4<-colData(sce)$C4
exprClust$C5<-colData(sce)$C5
m<-exprClust%>%group_by(HANS,REF,sample_id,cluster_id)%>%summarize_all(mean)%>%as.data.frame
##standardize
zz<- zScorePatientExpression(full.dn4=full.dn4,markers=c(1:31,104:111),ROIID.column=32)
### calculate any expression differences across sub-clusters and treatment response.
## ignore Tumor_11 cluster
zz<-zz[which(zz$unsup.subcommunity!="Tumor_11"),]
zz$annotated.label.simple_akil<-factor(zz$annotated.label.simple_akil)
subExpr<-zz%>%group_by(ROIID,annotated.label.simple_akil)%>%summarise(CXCR3=mean(Cell_CXCR3),
CCR4=mean(Cell_CCR4),
BCL2=mean(Cell_BCL2),
BCL6=mean(Cell_BCL6),
CD30=mean(Cell_CD30),
Ki67=mean(Cell_Ki67),
cMyc=mean(Cell_C),
PDL1=mean(Cell_PDL1),
TIM3=mean(Cell_Tim3),
LAG3=mean(Cell_Lag3),
PD1=mean(Cell_PD1),
ICOS=mean(Cell_ICOS),
Vista=mean(Cell_Vista),
CD45RO=mean(Cell_CD45RO),
CD45RA=mean(Cell_CD45RA),
CD206=mean(Cell_CD206),
Granzym=mean(Cell_Granzym),
Vimentin=mean(Cell_Vimentin),
Tbet=mean(Cell_Tbet),
NND.tumor=mean(NND.Tumor),
HLADR=mean(Cell_HLADR),
cMYC=mean(Cell_C),
CD68=mean(Cell_CD68),
CD206=mean(Cell_CD206),
pSTAT3=mean(Cell_p))%>%data.frame
subExpr$annotated.label.simple_akil<-droplevels(subExpr$annotated.label.simple_akil)
subExpr$HANS<-factor(clinic$Cell.of.origin..HANS.[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$REF<-factor(clinic$Response.category[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$C1<-factor(clinic$C1[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$C2<-factor(clinic$C2[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$C3<-factor(clinic$C3[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$C4<-factor(clinic$C4[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$C5<-factor(clinic$C5[match(subExpr$ROIID,clinic$Run.ID)])
subExpr$highIPI<-factor(  ifelse(clinic$ipi[match(subExpr$ROIID,clinic$Run.ID)]>=3,1,0))
outdir<-"C:/Users/UOSC/Documents/IMC-Ranalysis/DLBCL/blood-revisions-5-1-21/"
###reduced design.
# design <- createDesignMatrix(exper_info2, cols_design = c("NGCB","group_id",
#"C1","C2","C3","C4","C5",
#"Stage34", "NodalInvolve","LDH", "AgeHigh",
#"Gender",
#  "doubleExpressor",
#"patient_id"))
## Omitting NGCB as a test did not improve or alter the abundance results.
design <- createDesignMatrix(exper_info2, cols_design = c("NGCB", "group_id",
"C1","C2","C3","C4","C5",
"highIPI",
"Gender",
"doubleExpressor",
"patient_id"))
design<-design[,which(colSums(design)>1)]
#########Convergence issues.
##compare with design
res_IPI.LDH2 <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DA",
method_DA = "diffcyt-DA-edgeR",
min_cells=50,
min_samples=4,
normalize=TRUE,
#formula = formula,
design=design,
plot=TRUE,
#contrast=createContrast(c(0,0,0,0,0,0,0,1,0,0,rep(0,7))),
contrast=createContrast(c(0,0,0,0,0,0,0,0,1,0,0,rep(0,7))),
verbose = FALSE)
diffcyt::topTable(res_IPI.LDH2,format_vals = TRUE,top_n=10,show_logFC =TRUE)
sce
metadata(sce)
plotAbundances(sce, by = "cluster_id")
plotAbundances(sce,k="custom" by = "cluster_id")
plotAbundances(sce,k="custom" ,by = "cluster_id")
colData(sce)
plotAbundances(sce,by = "cluster_id")
outdir<-"C:/Users/UOSC/Documents/IMC-Ranalysis/DLBCL/blood-revisions-5-1-21/cluster-level-analysis"
writeToFile<-FALSE
minCells=50
minSamp=7
design <- createDesignMatrix(exper_info2, cols_design = c("group_id",
"C1","C2","C3","C4","C5",
"highIPI",
"Gender",
"doubleExpressor",
"patient_id"))
design<-design[,which(colSums(design)>1)]
colData(sce)$cluster_id<-factor(full.dn4$unsup.subcommunity[match(colData(sce)$id,full.dn4$uniqueLabel)])
metadata(sce)$cluster_codes$custom<-NULL
metadata(sce)$cluster_codes<-data.frame(custom=factor(unique(colData(sce)$cluster_id)))
markersToTest<- rownames(rowData(sce))[which(rowData(sce)$marker_class=='state')]
markersToTest<-markersToTest[which(markersToTest!="p" & markersToTest!="Tbet")]
markersToTest<-rownames(rowData(sce))%in%markersToTest
#########Convergence issues.
##compare with design
res_IPI.LDH2 <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DA",
method_DA = "diffcyt-DA-edgeR",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
#formula = formula,
design=design,
plot=TRUE,
contrast=createContrast(c(0,0,0,0,0,0,0,1,0,0,rep(0,7))),
#  contrast=createContrast(c(0,0,0,0,0,0,0,0,1,0,0,rep(0,7))),
verbose = FALSE)
diffcyt::topTable(res_IPI.LDH2,format_vals = TRUE,top_n=10,show_logFC =TRUE)
metadata(sce)$cluster_codes
plotAbundances(sce,k="custom",by = "cluster_id")
colData(sce)$cluster_id<-full.dn4$unsup.subcommunity
colData(sce)
plotAbundances(sce,k="custom",by = "cluster_id")
debug(plotAbundances)
plotAbundances(sce,k="custom",by = "cluster_id")
x
group_by
?plotAbundances
colData(sce)
plotAbundances(sce,group_by="REF",k="custom",by = "cluster_id")
undebug(plotAbundances)
colData(sce)
ref_DA <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DA",
method_DA = "diffcyt-DA-edgeR",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design=design,
contrast=createContrast(c(0,1,0,0,0,0,0,1,0,0,rep(0,7))),
#  contrast=createContrast(c(0,0,1,0,0,0,0,0,0,0,0,rep(0,7))),
verbose = FALSE)
topTable(ref_DA,format_vals = TRUE,top_n=10,show_logFC = TRUE)
ref_DS <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design=design,
markers_to_test = markersToTest,
contrast=createContrast(c(0,1,0,0,0,0,0,1,0,0,rep(0,7))),
verbose = FALSE)
diffcyt::topTable(ref_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
colData(sce)
plotAbundances(sce,group_by="C1",k="custom",by = "cluster_id")
colData(sce)$C1
colData(sce)$C1<-factor(colData(sce)$C1)
plotAbundances(sce,group_by="C1",k="custom",by = "cluster_id")
colData(sce)$C2<-factor(colData(sce)$C2)
plotAbundances(sce,group_by="C2",k="custom",by = "cluster_id")
colData(sce)$C3<-factor(colData(sce)$C3)
plotAbundances(sce,group_by="C3",k="custom",by = "cluster_id")
colData(sce)$C4<-factor(colData(sce)$C4)
plotAbundances(sce,group_by="C4",k="custom",by = "cluster_id")
C4_DS <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design = design,
markers_to_test = markersToTest,
contrast=createContrast(c(0,0,-1,-1,-1,1,-1,0,0,0,rep(0,7))),
verbose = FALSE)
topTable(C4_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
head(deisgn)
head(design)
chap_DS <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design = design,
markers_to_test = markersToTest,
contrast=createContrast(c(0,0,1,0,-1,-1,1,0,0,0,rep(0,7))),
verbose = FALSE)
topTable(chap_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
sce
sce
chap_DS <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design = design,
markers_to_test = markersToTest,
contrast=createContrast(c(0,0,1,0,-1,-1,1,1,0,0,rep(0,7))),
verbose = FALSE)
topTable(chap_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
chap_DS <- diffcyt(sce,
clustering_to_use = "custom",
analysis_type = "DS",
method_DS = "diffcyt-DS-limma",
min_cells=minCells,
min_samples=minSamp,
normalize=TRUE,
design = design,
markers_to_test = markersToTest,
contrast=createContrast(c(0,1,1,1,-1,-1,1,1,0,0,rep(0,7))),
verbose = FALSE)
topTable(chap_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0.05)
chap_DS$res
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
sce
debug(plotDiffHeatmap)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
x
y
i
i
table(i)
lfc
y
rowData(chap_DS$res)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
undebug(plotDiffHeatmap)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
debug(plotDiffHeatmap)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05, lfc=0)
p <- plotMedExprs(sce, k = "custom",
facet_by = "cluster_id", shape_by = "patient_id")
p <- plotMedExprs(sce, k = "custom", group_by="REF",
facet_by = "cluster_id", shape_by = "patient_id")
colData(sce)
?plotMedExprs
p <- plotMedExprs(sce, k = "custom", group_by="REF",
facet_by = "cluster_id")
p
topTable(chap_DS,format_vals = TRUE,top_n=10,show_logFC = TRUE)
colData(sce)
colData(sce)$REF
is.na(colData(sce)$REF)
is.na(colData(sce)$REF)%>%table
debug("S")
undebug("s")
debug(plotDiffHeatmap
)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 50, fdr = FDR_cutoff)
plotDiffHeatmap(sce, rowData(chap_DS$res), top_n = 5, fdr = 0.05,lfc=0)
names(y)
y_cols
kids
same
k
y
y
rownames(y)
rownames(y)<-NULL
y
y
knitr::opts_chunk$set(echo = TRUE)
